"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DashboardPage = void 0;
const semver = __importStar(require("semver"));
const DataSourcePicker_1 = require("../components/DataSourcePicker");
const GrafanaPage_1 = require("./GrafanaPage");
const PanelEditPage_1 = require("./PanelEditPage");
const TimeRange_1 = require("../components/TimeRange");
const Panel_1 = require("../components/Panel");
class DashboardPage extends GrafanaPage_1.GrafanaPage {
    ctx;
    dashboard;
    dataSourcePicker;
    timeRange;
    constructor(ctx, dashboard) {
        super(ctx, dashboard);
        this.ctx = ctx;
        this.dashboard = dashboard;
        this.dataSourcePicker = new DataSourcePicker_1.DataSourcePicker(ctx);
        this.timeRange = new TimeRange_1.TimeRange(ctx);
    }
    /**
     * Navigates to the dashboard page. If a dashboard uid was not provided, it's assumed that it's a new dashboard.
     */
    async goto(options = {}) {
        let url = this.dashboard?.uid
            ? this.ctx.selectors.pages.Dashboard.url(this.dashboard.uid)
            : this.ctx.selectors.pages.AddDashboard.url;
        if (this.dashboard?.timeRange) {
            options.queryParams = options?.queryParams ?? new URLSearchParams();
            options.queryParams.append('from', this.dashboard.timeRange.from);
            options.queryParams.append('to', this.dashboard.timeRange.to);
        }
        return super.navigate(url, options);
    }
    /**
     * Navigates to the panel edit page for the given panel id
     *
     * If the panel id does not exist in the dashboard, Grafana will redirect to the dashboard page
     */
    async gotoPanelEditPage(panelId) {
        const panelEditPage = new PanelEditPage_1.PanelEditPage(this.ctx, { dashboard: this.dashboard, id: panelId });
        await panelEditPage.goto();
        return panelEditPage;
    }
    /**
     * Returns a Panel object for the panel with the given title. Only works for panels that currently are in the viewport.
     *
     * Note that this won't navigate to the panel edit page, it will only return the Panel object, which
     * points to the locator for the panel in the dashboard page. Can be used to assert on the panel data, eg.
     * const panel = await dashboardPage.getPanelByTitle('Table panel');
     * await expect(panel.fieldNames).toContainText(['time', 'temperature']);
     */
    getPanelByTitle(title) {
        let locator = this.getByGrafanaSelector(this.ctx.selectors.components.Panels.Panel.title(title));
        // in older versions, the panel selector is added to a child element, so we need to go up two levels to get the wrapper
        if (semver.lt(this.ctx.grafanaVersion, '9.5.0')) {
            locator = locator.locator('..').locator('..');
        }
        return new Panel_1.Panel(this.ctx, locator);
    }
    /**
     * Returns a Panel object for the panel with the given id. Only works for panels that currently are in the viewport.
     *
     * Note that this won't navigate to the panel edit page, it will only return the Panel object, which
     * points to the locator for the panel in the dashboard page. Can be used to assert on the panel data, eg.
     * const panel = await dashboardPage.getPanelByTitle('2');
     * await expect(panel.fieldNames()).toContainText(['time', 'temperature']);
     */
    getPanelById(panelId) {
        return new Panel_1.Panel(this.ctx, this.ctx.page.locator(`[data-panelid="${panelId}"]`));
    }
    /**
     * Clicks the buttons to add a new panel and returns the panel edit page for the new panel
     */
    async addPanel() {
        const { components, pages } = this.ctx.selectors;
        // From Grafana 11.3.0, one needs to click the edit button before adding a new panel in already existing dashboards
        if (semver.gte(this.ctx.grafanaVersion, '11.3.0') && this.dashboard?.uid) {
            await this.getByGrafanaSelector(components.NavToolbar.editDashboard.editButton).click();
        }
        if (semver.gte(this.ctx.grafanaVersion, '10.0.0')) {
            await this.getByGrafanaSelector(components.PageToolbar.itemButton(components.PageToolbar.itemButtonTitle)).click();
            await this.getByGrafanaSelector(pages.AddDashboard.itemButton(pages.AddDashboard.itemButtonAddViz)).click();
        }
        else {
            if (this.dashboard?.uid) {
                await this.getByGrafanaSelector(components.PageToolbar.item('Add panel')).click();
            }
            await this.getByGrafanaSelector(pages.AddDashboard.addNewPanel).click();
        }
        const panelId = await this.ctx.page.evaluate(() => {
            const urlParams = new URLSearchParams(window.location.search);
            return urlParams.get('editPanel');
        });
        return new PanelEditPage_1.PanelEditPage(this.ctx, { dashboard: this.dashboard, id: panelId ?? '1' });
    }
    /**
     * Deletes the dashboard
     */
    async deleteDashboard() {
        if (this.dashboard?.uid) {
            await this.ctx.request.delete(this.ctx.selectors.apis.Dashboard.delete(this.dashboard.uid));
        }
    }
    /**
     * Clicks the run button in the refresh picker to refresh the dashboard
     */
    async refreshDashboard() {
        await this.ctx.page.getByTestId(this.ctx.selectors.components.RefreshPicker.runButtonV2).click();
    }
}
exports.DashboardPage = DashboardPage;
