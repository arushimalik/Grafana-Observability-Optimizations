"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VariablePage = void 0;
const GrafanaPage_1 = require("./GrafanaPage");
const VariableEditPage_1 = require("./VariableEditPage");
class VariablePage extends GrafanaPage_1.GrafanaPage {
    ctx;
    dashboard;
    constructor(ctx, dashboard) {
        super(ctx, dashboard);
        this.ctx = ctx;
        this.dashboard = dashboard;
    }
    /**
     * Navigates to the variable list page. If a dashboard uid was not provided, it's assumed that it's a new dashboard.
     */
    async goto(options) {
        const { Dashboard, AddDashboard } = this.ctx.selectors.pages;
        let url = this.dashboard?.uid
            ? Dashboard.Settings.Variables.List.url(this.dashboard.uid)
            : AddDashboard.Settings.Variables.List.url;
        return super.navigate(url, options);
    }
    /**
     * Clicks the add new variable button and returns the variable edit page
     */
    async clickAddNew() {
        const { addVariableCTAV2, addVariableCTAV2Item, newButton } = this.ctx.selectors.pages.Dashboard.Settings.Variables.List;
        if (!this.dashboard?.uid) {
            await this.getByGrafanaSelector(addVariableCTAV2(addVariableCTAV2Item)).click();
        }
        else {
            await this.getByGrafanaSelector(newButton).click();
        }
        const editIndex = await this.ctx.page.evaluate(() => {
            const urlParams = new URLSearchParams(window.location.search);
            return urlParams.get('editIndex');
        });
        return new VariableEditPage_1.VariableEditPage(this.ctx, { dashboard: this.dashboard, id: editIndex || '1' });
    }
}
exports.VariablePage = VariablePage;
