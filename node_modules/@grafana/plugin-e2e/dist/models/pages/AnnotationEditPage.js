"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AnnotationEditPage = void 0;
const semver = __importStar(require("semver"));
const DataSourcePicker_1 = require("../components/DataSourcePicker");
const GrafanaPage_1 = require("./GrafanaPage");
class AnnotationEditPage extends GrafanaPage_1.GrafanaPage {
    ctx;
    args;
    datasource;
    constructor(ctx, args) {
        super(ctx, args);
        this.ctx = ctx;
        this.args = args;
        this.datasource = new DataSourcePicker_1.DataSourcePicker(ctx);
    }
    /**
     * Navigates to the annotation edit page. If a dashboard uid was not provided, it's assumed that it's a new dashboard.
     */
    async goto(options) {
        const { Dashboard, AddDashboard } = this.ctx.selectors.pages;
        const url = this.args.dashboard?.uid
            ? Dashboard.Settings.Annotations.Edit.url(this.args.dashboard.uid, this.args.id)
            : AddDashboard.Settings.Annotations.Edit.url(this.args.id);
        await super.navigate(url, options);
        // In versions before 9.2.0, the annotation index is not part of the URL so there's no way to navigate to it directly.
        // Instead, we have to click the nth row in the variable list to navigate to the edit page for a given annotation index.
        if (semver.lt(this.ctx.grafanaVersion, '9.2.0') && this.args.id) {
            const list = this.ctx.page.locator('tbody tr');
            const variables = await list.all();
            await variables[Number(this.args.id)].click();
        }
    }
    /**
     * Executes the annotation query defined in the annotation page and returns the response promise
     * @param options - Optional. RequestOptions to pass to waitForResponse
     */
    async runQuery(options) {
        const responsePromise = this.ctx.page.waitForResponse((resp) => resp.url().includes(this.ctx.selectors.apis.DataSource.query), options);
        const testButton = semver.gte(this.ctx.grafanaVersion, '11.0.0')
            ? this.getByGrafanaSelector(this.ctx.selectors.components.Annotations.editor.testButton)
            : this.ctx.page.getByRole('button', { name: 'TEST' });
        await testButton.click();
        return responsePromise;
    }
}
exports.AnnotationEditPage = AnnotationEditPage;
