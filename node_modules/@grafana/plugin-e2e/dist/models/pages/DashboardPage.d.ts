import { DashboardPageArgs, NavigateOptions, PluginTestCtx } from '../../types';
import { GrafanaPage } from './GrafanaPage';
import { PanelEditPage } from './PanelEditPage';
import { TimeRange } from '../components/TimeRange';
import { Panel } from '../components/Panel';
export declare class DashboardPage extends GrafanaPage {
    readonly ctx: PluginTestCtx;
    readonly dashboard?: DashboardPageArgs | undefined;
    dataSourcePicker: any;
    timeRange: TimeRange;
    constructor(ctx: PluginTestCtx, dashboard?: DashboardPageArgs | undefined);
    /**
     * Navigates to the dashboard page. If a dashboard uid was not provided, it's assumed that it's a new dashboard.
     */
    goto(options?: NavigateOptions): Promise<void>;
    /**
     * Navigates to the panel edit page for the given panel id
     *
     * If the panel id does not exist in the dashboard, Grafana will redirect to the dashboard page
     */
    gotoPanelEditPage(panelId: string): Promise<PanelEditPage>;
    /**
     * Returns a Panel object for the panel with the given title. Only works for panels that currently are in the viewport.
     *
     * Note that this won't navigate to the panel edit page, it will only return the Panel object, which
     * points to the locator for the panel in the dashboard page. Can be used to assert on the panel data, eg.
     * const panel = await dashboardPage.getPanelByTitle('Table panel');
     * await expect(panel.fieldNames).toContainText(['time', 'temperature']);
     */
    getPanelByTitle(title: string): Panel;
    /**
     * Returns a Panel object for the panel with the given id. Only works for panels that currently are in the viewport.
     *
     * Note that this won't navigate to the panel edit page, it will only return the Panel object, which
     * points to the locator for the panel in the dashboard page. Can be used to assert on the panel data, eg.
     * const panel = await dashboardPage.getPanelByTitle('2');
     * await expect(panel.fieldNames()).toContainText(['time', 'temperature']);
     */
    getPanelById(panelId: string): Panel;
    /**
     * Clicks the buttons to add a new panel and returns the panel edit page for the new panel
     */
    addPanel(): Promise<PanelEditPage>;
    /**
     * Deletes the dashboard
     */
    deleteDashboard(): Promise<void>;
    /**
     * Clicks the run button in the refresh picker to refresh the dashboard
     */
    refreshDashboard(): Promise<void>;
}
