import { Locator, Response } from '@playwright/test';
import { DashboardEditViewArgs, NavigateOptions, PluginTestCtx, RequestOptions, Visualization } from '../../types';
import { DataSourcePicker } from '../components/DataSourcePicker';
import { GrafanaPage } from './GrafanaPage';
import { TimeRange } from '../components/TimeRange';
import { Panel } from '../components/Panel';
import { DashboardPage } from './DashboardPage';
export declare class PanelEditPage extends GrafanaPage {
    readonly ctx: PluginTestCtx;
    readonly args: DashboardEditViewArgs<string>;
    datasource: DataSourcePicker;
    timeRange: TimeRange;
    panel: Panel;
    constructor(ctx: PluginTestCtx, args: DashboardEditViewArgs<string>);
    private getPanelLocator;
    /**
     * Navigates to the panel edit page. If a dashboard uid was not provided, it's assumed that it's a new dashboard.
     */
    goto(options?: NavigateOptions): Promise<void>;
    toggleTableView(): Promise<void>;
    untoggleTableView(): Promise<void>;
    /**
     * Sets the title of the panel. This method will open the panel options, set the title and close the panel options.
     */
    setPanelTitle(titleText: string): Promise<void>;
    /**
     * Sets the visualization for the panel. This method will open the visualization picker, select the given visualization
     */
    setVisualization(visualization: Visualization | string): Promise<void>;
    /**
     * Expands the section for the given category name. If the section is already expanded, this method does nothing.
     */
    collapseSection(categoryName: string): Promise<void>;
    /**
     * Returns the name of the visualization currently selected in the panel editor
     */
    getVisualizationName(): Locator;
    /**
     * Clicks the "Back to dashboard" button in the panel editor
     * In versions prior to 11.3.0, this method clicks the "Apply" button instead
     */
    backToDashboard(): Promise<DashboardPage>;
    /**
     * Clicks the "Apply" button in the panel editor
     *
     * @deprecated use {@link PanelEditPage.backToDashboard} method instead.
     */
    apply(): Promise<DashboardPage>;
    /**
     * Returns the locator for the query editor row with the given refId
     */
    getQueryEditorRow(refId: string): Locator;
    /**
     * Clicks the "Refresh" button in the panel editor. Returns the response promise for the data query
     *
     * By default, this method will wait for any response that has the url '/api/ds/query'.
     * If you need to wait for a specific response, you can pass a callback to the `waitForResponsePredicateCallback` option.
     * e.g
     * panelEditPage.refreshPanel({
        waitForResponsePredicateCallback: (r) =>
          r.url().includes(selectors.apis.DataSource.query) &&
          r.body().then((body) => body.includes(`"status":"finished"`)),
      })
     */
    refreshPanel(options?: RequestOptions): Promise<Response>;
}
