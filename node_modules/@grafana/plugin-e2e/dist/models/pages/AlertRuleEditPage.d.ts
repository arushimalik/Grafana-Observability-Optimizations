import { AlertRuleArgs, NavigateOptions, PluginTestCtx, RequestOptions } from '../../types';
import { GrafanaPage } from './GrafanaPage';
import { AlertRuleQuery } from '../components/AlertRuleQuery';
export declare class AlertRuleEditPage extends GrafanaPage {
    readonly ctx: PluginTestCtx;
    readonly args?: AlertRuleArgs | undefined;
    constructor(ctx: PluginTestCtx, args?: AlertRuleArgs | undefined);
    /**
     * Navigates to the annotation edit page. If a dashboard uid was not provided, it's assumed that it's a new dashboard.
     */
    goto(options?: NavigateOptions): Promise<void>;
    /**
     * Returns a locator for hte alert rule name field
     */
    get alertRuleNameField(): import("playwright-core").Locator;
    /**
     * Returns an instance of the {@link AlertRuleQuery} class for the query row with the provided refId.
     */
    getAlertRuleQueryRow(refId: string): AlertRuleQuery;
    /**
     * Clicks the "Add query" button and returns an instance of the {@link AlertRuleQuery} class for the new query row.
     */
    clickAddQueryRow(): Promise<AlertRuleQuery>;
    /**
     * Clicks the evaluate button and waits for the evaluation to complete. If the evaluation is successful, the status code of the response is 200.
     * If one or more queries are invalid, an error status code is returned.
     *
     * Note that this method intercepts the response of the alerting evaluation endpoint and returns the status code of the first failed query.
     * This means that any mocks defined with page.route in your tests will be overriden.
     *
     * Only supported for Grafana version 9.5.0 ad later.
     */
    evaluate(options?: RequestOptions): Promise<import("playwright-core").Response>;
}
