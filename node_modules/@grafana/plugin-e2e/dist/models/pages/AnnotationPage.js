"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AnnotationPage = void 0;
const semver = __importStar(require("semver"));
const AnnotationEditPage_1 = require("./AnnotationEditPage");
const GrafanaPage_1 = require("./GrafanaPage");
class AnnotationPage extends GrafanaPage_1.GrafanaPage {
    ctx;
    dashboard;
    constructor(ctx, dashboard) {
        super(ctx, dashboard);
        this.ctx = ctx;
        this.dashboard = dashboard;
    }
    /**
     * Navigates to the annotation list page. If a dashboard uid was not provided, it's assumed that it's a new dashboard.
     */
    async goto(options) {
        const { Dashboard, AddDashboard } = this.ctx.selectors.pages;
        let url = this.dashboard?.uid
            ? Dashboard.Settings.Annotations.List.url(this.dashboard.uid)
            : AddDashboard.Settings.Annotations.List.url;
        return super.navigate(url, options);
    }
    /**
     * Clicks the add new annotation button and returns the annotation edit page
     */
    async clickAddNew() {
        const { addAnnotationCTAV2, addAnnotationCTA } = this.ctx.selectors.pages.Dashboard.Settings.Annotations.List;
        if (!this.dashboard?.uid) {
            //the dashboard doesn't have any annotations yet (except for the built-in one)
            if (semver.gte(this.ctx.grafanaVersion, '8.3.0')) {
                await this.getByGrafanaSelector(addAnnotationCTAV2).click();
            }
            else {
                await this.getByGrafanaSelector(addAnnotationCTA).click();
            }
        }
        else {
            //the dashboard already has annotations
            const newQueryButton = semver.gte(this.ctx.grafanaVersion, '11.0.0')
                ? this.getByGrafanaSelector(addAnnotationCTAV2)
                : this.ctx.page.getByRole('button', { name: 'New query' });
            await newQueryButton.click();
        }
        const editIndex = await this.ctx.page.evaluate(() => {
            const urlParams = new URLSearchParams(window.location.search);
            return urlParams.get('editIndex');
        });
        return new AnnotationEditPage_1.AnnotationEditPage(this.ctx, { id: editIndex || '1' });
    }
}
exports.AnnotationPage = AnnotationPage;
