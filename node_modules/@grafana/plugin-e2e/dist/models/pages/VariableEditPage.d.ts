import { DashboardEditViewArgs, NavigateOptions, PluginTestCtx } from '../../types';
import { DataSourcePicker } from '../components/DataSourcePicker';
import { GrafanaPage } from './GrafanaPage';
export type VariableType = 'Query' | 'Constant' | 'Custom';
export declare class VariableEditPage extends GrafanaPage {
    readonly ctx: PluginTestCtx;
    readonly args: DashboardEditViewArgs<string>;
    datasource: DataSourcePicker;
    constructor(ctx: PluginTestCtx, args: DashboardEditViewArgs<string>);
    /**
     * Navigates to the variable edit page. If a dashboard uid was not provided, it's assumed that it's a new dashboard.
     */
    goto(options?: NavigateOptions): Promise<void>;
    /**
     * Sets the type of variable in the 'Variable type' dropdown to the given type
     */
    setVariableType(type: VariableType): Promise<void>;
    /**
     * Triggers the variable query to run. Note that unlike {@link PanelEditPage.refreshPanel}, this method doesn't
     * return a request promise. This is because there's no canonical way of querying variables - data sources may
     * call any endpoint or resolve variables in the frontend. If you need to wait for a specific request, you can
     * do that in your test.
     * @example await this.ctx.page.waitForResponse((resp) => resp.url().includes('<url>')
     */
    runQuery(): Promise<void>;
}
