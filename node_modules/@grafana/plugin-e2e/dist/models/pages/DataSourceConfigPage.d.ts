import { Response } from '@playwright/test';
import { DataSourceSettings, NavigateOptions, PluginTestCtx, TriggerRequestOptions } from '../../types';
import { GrafanaPage } from './GrafanaPage';
export declare class DataSourceConfigPage extends GrafanaPage {
    datasource: DataSourceSettings;
    constructor(ctx: PluginTestCtx, datasource: DataSourceSettings);
    deleteDataSource(): Promise<void>;
    /**
     * Navigates to the datasource edit page for an existing datasource
     */
    goto(options?: NavigateOptions): Promise<void>;
    /**
     * Mocks the response of the datasource health check call
     * @param json the json response to return
     * @param status the HTTP status code to return. Defaults to 200
     */
    mockHealthCheckResponse<T = any>(json: T, status?: number): Promise<void>;
    /**
     * Clicks the save and test button and waits for the response
     *
     * By default, this will return the response of the health check call to /api/datasources/uid/<pluginUid>/health.
     * Optionally, if your plugin uses a custom health check endpoint, you can provide the {@link TriggerRequestOptions.path } of this url.
     * May be useful for data source plugins that don't have a backend.
     */
    saveAndTest(options?: TriggerRequestOptions): Promise<Response>;
}
