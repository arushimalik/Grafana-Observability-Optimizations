import { Locator, Request, Response } from '@playwright/test';
import { getByGrafanaSelectorOptions, GrafanaPageArgs, NavigateOptions, PluginTestCtx } from '../../types';
/**
 * Base class for all Grafana pages.
 *
 * Exposes methods for locating Grafana specific elements on the page
 */
export declare abstract class GrafanaPage {
    readonly ctx: PluginTestCtx;
    readonly pageArgs: GrafanaPageArgs;
    constructor(ctx: PluginTestCtx, pageArgs?: GrafanaPageArgs);
    protected navigate(url: string, options?: NavigateOptions): Promise<void>;
    /**
     * Get a locator based on a Grafana E2E selector. A grafana E2E selector is defined in @grafana/e2e-selectors or in plugin-e2e/src/e2e-selectors.
     * An E2E selector is a string that identifies a specific element in the Grafana UI. The element referencing the E2E selector use the data-testid or aria-label attribute.
     */
    getByGrafanaSelector(selector: string, options?: getByGrafanaSelectorOptions): Locator;
    /**
     * Mocks the response of the datasource query call
     * @param json the json response to return
     * @param status the HTTP status code to return. Defaults to 200
     */
    mockQueryDataResponse<T = any>(json: T, status?: number): Promise<void>;
    /**
     * Mocks the response of the datasource resource request.
     * https://grafana.com/developers/plugin-tools/key-concepts/backend-plugins#resources
     *
     * @param path the path of the resource to mock
     * @param json the json response to return
     * @param status the HTTP status code to return. Defaults to 200
     */
    mockResourceResponse<T = any>(path: string, json: T, status?: number): Promise<void>;
    /**
     * Waits for a data source query data request to be made.
     *
     * @param cb optional callback to filter the request. Use this to filter by request body or other request properties
     */
    waitForQueryDataRequest(cb?: (request: Request) => boolean | Promise<boolean>): Promise<Request>;
    /**
     * Waits for a data source query data response
     *
     * @param cb optional callback to filter the response. Use this to filter by response body or other response properties
     */
    waitForQueryDataResponse(cb?: (request: Response) => boolean | Promise<boolean>): Promise<Response>;
}
