"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExplorePage = void 0;
const semver = __importStar(require("semver"));
const DataSourcePicker_1 = require("../components/DataSourcePicker");
const GrafanaPage_1 = require("./GrafanaPage");
const TimeRange_1 = require("../components/TimeRange");
const Panel_1 = require("../components/Panel");
const TIME_SERIES_PANEL_SELECTOR_SUFFIX = 'Graph';
const TABLE_PANEL_SELECTOR_SUFFIX = 'Table';
const TIME_SERIES_PANEL_TEXT = 'Graph Lines Bars Points';
const TABLE_PANEL_TEXT = 'Table';
class ExplorePage extends GrafanaPage_1.GrafanaPage {
    args;
    datasource;
    timeRange;
    timeSeriesPanel;
    tablePanel;
    constructor(ctx, args) {
        super(ctx, args);
        this.args = args;
        this.datasource = new DataSourcePicker_1.DataSourcePicker(ctx);
        this.timeRange = new TimeRange_1.TimeRange(ctx);
        this.timeSeriesPanel = new Panel_1.Panel(this.ctx, this.getPanelLocators(TIME_SERIES_PANEL_SELECTOR_SUFFIX, TIME_SERIES_PANEL_TEXT));
        this.tablePanel = new Panel_1.Panel(this.ctx, this.getPanelLocators(TABLE_PANEL_SELECTOR_SUFFIX, TABLE_PANEL_TEXT));
    }
    getPanelLocators(suffix, text) {
        const page = this.ctx.page;
        let locator = this.getByGrafanaSelector(this.ctx.selectors.components.Panels.Panel.title(suffix), {
            startsWith: true,
        });
        // having to use these selectors is unfortunate, but the Explore page did not use data-testid on the panels before Grafana 10.
        if (semver.lt(this.ctx.grafanaVersion, '9.3.0')) {
            locator = page.getByText(suffix).locator('..').locator('..').locator('..');
        }
        else if (semver.lt(this.ctx.grafanaVersion, '10.0.0')) {
            locator = page.getByRole('button', { name: text }).locator('..');
        }
        return locator;
    }
    /**
     * Navigates to the explore page.
     */
    async goto(options) {
        await super.navigate(this.ctx.selectors.pages.Explore.url, options);
    }
    /**
     * Returns the locator for the query editor row with the given refId
     */
    getQueryEditorRow(refId) {
        return this.getByGrafanaSelector(this.ctx.selectors.components.QueryEditorRows.rows).filter({
            has: this.getByGrafanaSelector(this.ctx.selectors.components.QueryEditorRow.title(refId)),
        });
    }
    /**
     * Clicks the "Run Query" button in the refresh picker to run the query. Returns the response promise for the data query
     */
    async runQuery(options) {
        const components = this.ctx.selectors.components;
        const responsePromise = this.ctx.page.waitForResponse((resp) => resp.url().includes(this.ctx.selectors.apis.DataSource.query), options);
        try {
            await this.getByGrafanaSelector(components.RefreshPicker.runButtonV2).click({
                timeout: 1000,
            });
        }
        catch (_) {
            // handle the case when the run button is hidden behind the "Show more items" button
            await this.getByGrafanaSelector(components.PageToolbar.item(components.PageToolbar.showMoreItems)).click();
            await this.getByGrafanaSelector(components.RefreshPicker.runButtonV2).last().click();
        }
        return responsePromise;
    }
}
exports.ExplorePage = ExplorePage;
