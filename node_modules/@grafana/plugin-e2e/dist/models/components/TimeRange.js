"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TimeRange = void 0;
const semver = __importStar(require("semver"));
const GrafanaPage_1 = require("../pages/GrafanaPage");
class TimeRange extends GrafanaPage_1.GrafanaPage {
    constructor(ctx) {
        super(ctx);
    }
    /**
     * Opens the time picker and sets the time range to the provided values
     */
    async set({ from, to, zone }) {
        const { TimeZonePicker, TimePicker } = this.ctx.selectors.components;
        try {
            await this.getByGrafanaSelector(TimePicker.openButton).click();
        }
        catch (e) {
            // seems like in older versions of Grafana the time picker markup is rendered twice
            await this.ctx.page.locator('[aria-controls="TimePickerContent"]').last().click();
        }
        if (zone) {
            const changeTimeSettingsButton = semver.gte(this.ctx.grafanaVersion, '11.0.0')
                ? this.getByGrafanaSelector(TimeZonePicker.changeTimeSettingsButton)
                : this.ctx.page.getByRole('button', { name: 'Change time settings' });
            await changeTimeSettingsButton.click();
            await this.getByGrafanaSelector(TimeZonePicker.containerV2).fill(zone);
        }
        await this.getByGrafanaSelector(TimePicker.absoluteTimeRangeTitle).click();
        const fromField = await this.getByGrafanaSelector(TimePicker.fromField);
        await fromField.clear();
        await fromField.fill(from);
        const toField = await this.getByGrafanaSelector(TimePicker.toField);
        await toField.clear();
        await toField.fill(to);
        await this.getByGrafanaSelector(TimePicker.applyTimeRange).click();
    }
}
exports.TimeRange = TimeRange;
