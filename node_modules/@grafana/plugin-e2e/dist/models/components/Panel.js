"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Panel = void 0;
const semver = __importStar(require("semver"));
const GrafanaPage_1 = require("../pages/GrafanaPage");
const ERROR_STATUS = 'error';
class Panel extends GrafanaPage_1.GrafanaPage {
    ctx;
    locator;
    constructor(ctx, locator) {
        super(ctx);
        this.ctx = ctx;
        this.locator = locator;
    }
    /**
     * Returns a locator that resolves element(s) that contain the field name(s) that are currently displayed in the panel.
     *
     * Can be used to assert the field names displayed in the panel visualization. e.g
     * await expect(panelEditPage.panel.fieldNames).toHaveValues(['Month', 'Stockholm', 'Berlin', 'Log Angeles']);
     */
    get fieldNames() {
        const panel = this.locator;
        return panel.locator('[role="columnheader"]');
    }
    /**
     * Returns a locator that resolves element(s) that contain the value(s) that are currently displayed in the panel.
     *
     * Can be used to assert the values displayed in the panel visualization. e.g
     * await expect(panelEditPage.panel.data).toContainText(['1', '4', '14']);
     */
    get data() {
        const panel = this.locator;
        return panel.locator('[role="cell"]');
    }
    /**
     * Click on a menu item in the panel menu.
     *
     * Pass options.parentItem to specify the parent item of the menu item to click.
     */
    async clickOnMenuItem(item, options) {
        let panelMenu = this.getByGrafanaSelector(this.ctx.selectors.components.Panels.Panel.menu(''), {
            startsWith: true,
            root: this.locator,
        });
        let parentMenuItem = this.getByGrafanaSelector(this.ctx.selectors.components.Panels.Panel.menuItems(options?.parentItem ?? ''));
        let menuItem = this.getByGrafanaSelector(this.ctx.selectors.components.Panels.Panel.menuItems(item));
        // before 9.5.0, there were no proper selectors for the panel menu items
        if (semver.lt(this.ctx.grafanaVersion, '9.5.0')) {
            panelMenu = this.locator.getByRole('heading');
            parentMenuItem = this.ctx.page.getByText(options?.parentItem ?? '');
            menuItem = this.ctx.page.getByRole('menu').getByText(item);
        }
        await panelMenu.click({ force: true });
        options?.parentItem && (await parentMenuItem.hover());
        await menuItem.click();
    }
    /**
     * Returns the locator for the panel error (if any)
     */
    getErrorIcon() {
        let selector = this.ctx.selectors.components.Panels.Panel.status(ERROR_STATUS);
        // the selector (not the selector value) used to identify a panel error changed in 9.4.3
        if (semver.lte(this.ctx.grafanaVersion, '9.4.3')) {
            selector = this.ctx.selectors.components.Panels.Panel.headerCornerInfo(ERROR_STATUS);
        }
        return this.getByGrafanaSelector(selector, {
            root: this.locator,
        });
    }
}
exports.Panel = Panel;
