"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GrafanaAPIClient = void 0;
class GrafanaAPIClient {
    request;
    constructor(request) {
        this.request = request;
    }
    async getUserIdByUsername(userName) {
        const getUserIdByUserNameReq = await this.request.get(`/api/users/lookup?loginOrEmail=${userName}`);
        const json = await getUserIdByUserNameReq.json();
        return json.id;
    }
    async createUser(user) {
        const createUserReq = await this.request.post(`/api/admin/users`, {
            data: {
                name: user?.user,
                login: user?.user,
                password: user?.password,
            },
        });
        let userId;
        if (createUserReq.ok()) {
            const respJson = await createUserReq.json();
            userId = respJson.id;
        }
        else if (createUserReq.status() === 412) {
            // user already exists
            userId = await this.getUserIdByUsername(user?.user);
        }
        else {
            throw new Error(`Could not create user '${user?.user}'. Find information on how user can be managed in the plugin-e2e docs: https://grafana.com/developers/plugin-tools/e2e-test-a-plugin/use-authentication#managing-users  : ${await createUserReq.text()}`);
        }
        if (user.role) {
            const updateRoleReq = await this.request.patch(`/api/org/users/${userId}`, {
                data: { role: user.role },
            });
            if (!updateRoleReq.ok()) {
                throw new Error(`Could not assign role '${user.role}' to user '${user.user}': ${await updateRoleReq.text()}`);
            }
        }
    }
    async getDataSourceSettingsByUID(uid) {
        const response = await this.request.get(`/api/datasources/uid/${uid}`);
        if (!response.ok()) {
            throw new Error(`Failed to get datasource by uid: ${response.statusText()}. If you're using a provisioned data source, make sure it has a UID`);
        }
        const settings = await response.json();
        return settings;
    }
}
exports.GrafanaAPIClient = GrafanaAPIClient;
