import { AlertPageOptions, AlertVariant, ContainTextOptions, PluginFixture, PluginOptions } from './types';
import { GrafanaPage } from './models/pages/GrafanaPage';
import { VariableEditPage } from './models/pages/VariableEditPage';
export { DataSourcePicker } from './models/components/DataSourcePicker';
export { Panel } from './models/components/Panel';
export { TimeRange } from './models/components/TimeRange';
export { AnnotationEditPage } from './models/pages/AnnotationEditPage';
export { AnnotationPage } from './models/pages/AnnotationPage';
export { DashboardPage } from './models/pages/DashboardPage';
export { DataSourceConfigPage } from './models/pages/DataSourceConfigPage';
export { ExplorePage } from './models/pages/ExplorePage';
export { GrafanaPage } from './models/pages/GrafanaPage';
export { PanelEditPage } from './models/pages/PanelEditPage';
export { VariableEditPage } from './models/pages/VariableEditPage';
export { VariablePage } from './models/pages/VariablePage';
export { AppConfigPage } from './models/pages/AppConfigPage';
export { PluginConfigPage } from './models/pages/PluginConfigPage';
export { AppPage } from './models/pages/AppPage';
export { Components, Pages, APIs, E2ESelectors } from './e2e-selectors/types';
export { resolveSelectors } from './e2e-selectors/resolver';
export * from './types';
export declare const test: import("@playwright/test").TestType<import("@playwright/test").PlaywrightTestArgs & import("@playwright/test").PlaywrightTestOptions & PluginFixture, import("@playwright/test").PlaywrightWorkerArgs & import("@playwright/test").PlaywrightWorkerOptions & PluginOptions>;
export declare const expect: import("@playwright/test").Expect<{
    toHaveAlert: (grafanaPage: GrafanaPage, severity: import("./matchers/toHaveAlert").AlertVariant, options?: AlertPageOptions) => Promise<{
        message: () => any;
        pass: boolean;
    }>;
    toDisplayPreviews: (variableEditPage: VariableEditPage, previewTexts: Array<string | RegExp>, options?: ContainTextOptions) => Promise<{
        pass: boolean;
        actual: boolean;
        message: () => string;
    } | {
        message: () => string;
        pass: boolean;
        actual: undefined;
    }>;
    toBeOK: (request: Promise<import("@playwright/test").Response>) => Promise<{
        message: () => string;
        pass: boolean;
        actual: number;
    } | {
        message: () => string;
        pass: boolean;
        actual: undefined;
    }>;
}>;
export { selectors } from '@playwright/test';
declare global {
    interface Window {
        monaco: any;
        grafanaBootData: {
            settings: {
                featureToggles: Record<string, boolean>;
            };
        };
    }
    namespace PlaywrightTest {
        const r: unique symbol;
        const t: unique symbol;
        interface Matchers<R, T> {
            [r]: R;
            [t]: T;
            /**
             * Await the response of a Playwright request and asserts the response was successful (status in the range 200-299).
             */
            toBeOK(this: Matchers<unknown, Promise<Response>>): R;
            /**
             * Asserts that preview text elements are displayed on the Variable Edit Page. You should make sure any variable queries are completed before calling this matcher.
             */
            toDisplayPreviews(this: Matchers<unknown, VariableEditPage>, previewTexts: Array<string | RegExp>, options: ContainTextOptions): R;
            /**
             * Asserts that a GrafanaPage contains an alert with the specified severity. Use the options to specify the timeout and to filter the alerts.
             */
            toHaveAlert(this: Matchers<unknown, GrafanaPage>, severity: AlertVariant, options?: AlertPageOptions): Promise<R>;
        }
    }
}
