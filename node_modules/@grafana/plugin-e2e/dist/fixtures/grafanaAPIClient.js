"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.grafanaAPIClient = exports.createAdminClientStorageState = void 0;
const path_1 = __importDefault(require("path"));
const test_1 = require("@playwright/test");
const GrafanaAPIClient_1 = require("../models/GrafanaAPIClient");
const adminClientStorageState = path_1.default.join(process.cwd(), `playwright/.auth/grafanaAPICredentials.json`);
const createAdminClientStorageState = async (request, grafanaAPICredentials) => {
    const loginReq = await request.post('/login', { data: grafanaAPICredentials });
    const text = await loginReq.text();
    await test_1.expect.soft(loginReq.ok(), `Could not log in to Grafana: ${text}`).toBeTruthy();
    await request.storageState({ path: adminClientStorageState });
};
exports.createAdminClientStorageState = createAdminClientStorageState;
const grafanaAPIClient = async ({ browser, grafanaAPICredentials }, use) => {
    const context = await browser.newContext({ storageState: undefined });
    const loginReq = await context.request.post('/login', { data: grafanaAPICredentials });
    if (!loginReq.ok()) {
        console.log(`Could not login to grafana using credentials '${grafanaAPICredentials?.user}'. Find information on how user can be managed in the plugin-e2e docs: https://grafana.com/developers/plugin-tools/e2e-test-a-plugin/use-authentication#managing-users  : ${await loginReq.text()}`);
    }
    await context.request.storageState({ path: adminClientStorageState });
    await use(new GrafanaAPIClient_1.GrafanaAPIClient(context.request));
};
exports.grafanaAPIClient = grafanaAPIClient;
