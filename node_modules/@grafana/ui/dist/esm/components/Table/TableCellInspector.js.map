{"version":3,"file":"TableCellInspector.js","sources":["../../../../src/components/Table/TableCellInspector.tsx"],"sourcesContent":["import { isString } from 'lodash';\n\nimport { ClipboardButton } from '../ClipboardButton/ClipboardButton';\nimport { Drawer } from '../Drawer/Drawer';\nimport { CodeEditor } from '../Monaco/CodeEditor';\n\ninterface TableCellInspectorProps {\n  value: any;\n  onDismiss: () => void;\n  mode: 'code' | 'text';\n}\n\nexport function TableCellInspector({ value, onDismiss, mode }: TableCellInspectorProps) {\n  let displayValue = value;\n  if (isString(value)) {\n    const trimmedValue = value.trim();\n    // Exclude numeric strings like '123' from being displayed in code/JSON mode\n    if (trimmedValue[0] === '{' || trimmedValue[0] === '[' || mode === 'code') {\n      try {\n        value = JSON.parse(value);\n        mode = 'code';\n      } catch {\n        mode = 'text';\n      } // ignore errors\n    } else {\n      mode = 'text';\n    }\n  } else {\n    displayValue = JSON.stringify(value, null, ' ');\n  }\n  let text = displayValue;\n\n  if (mode === 'code') {\n    text = JSON.stringify(value, null, ' ');\n  }\n\n  return (\n    <Drawer onClose={onDismiss} title=\"Inspect value\">\n      {mode === 'code' ? (\n        <CodeEditor\n          width=\"100%\"\n          height={500}\n          language=\"json\"\n          showLineNumbers={true}\n          showMiniMap={(text && text.length) > 100}\n          value={text}\n          readOnly={true}\n        />\n      ) : (\n        <pre>{text}</pre>\n      )}\n      <ClipboardButton icon=\"copy\" getText={() => text}>\n        Copy to Clipboard\n      </ClipboardButton>\n    </Drawer>\n  );\n}\n"],"names":[],"mappings":";;;;;;AAYO,SAAS,kBAAmB,CAAA,EAAE,KAAO,EAAA,SAAA,EAAW,MAAiC,EAAA;AACtF,EAAA,IAAI,YAAe,GAAA,KAAA,CAAA;AACnB,EAAI,IAAA,QAAA,CAAS,KAAK,CAAG,EAAA;AACnB,IAAM,MAAA,YAAA,GAAe,MAAM,IAAK,EAAA,CAAA;AAEhC,IAAI,IAAA,YAAA,CAAa,CAAC,CAAM,KAAA,GAAA,IAAO,aAAa,CAAC,CAAA,KAAM,GAAO,IAAA,IAAA,KAAS,MAAQ,EAAA;AACzE,MAAI,IAAA;AACF,QAAQ,KAAA,GAAA,IAAA,CAAK,MAAM,KAAK,CAAA,CAAA;AACxB,QAAO,IAAA,GAAA,MAAA,CAAA;AAAA,OACD,CAAA,OAAA,CAAA,EAAA;AACN,QAAO,IAAA,GAAA,MAAA,CAAA;AAAA,OACT;AAAA,KACK,MAAA;AACL,MAAO,IAAA,GAAA,MAAA,CAAA;AAAA,KACT;AAAA,GACK,MAAA;AACL,IAAA,YAAA,GAAe,IAAK,CAAA,SAAA,CAAU,KAAO,EAAA,IAAA,EAAM,GAAG,CAAA,CAAA;AAAA,GAChD;AACA,EAAA,IAAI,IAAO,GAAA,YAAA,CAAA;AAEX,EAAA,IAAI,SAAS,MAAQ,EAAA;AACnB,IAAA,IAAA,GAAO,IAAK,CAAA,SAAA,CAAU,KAAO,EAAA,IAAA,EAAM,GAAG,CAAA,CAAA;AAAA,GACxC;AAEA,EAAA,uBACG,IAAA,CAAA,MAAA,EAAA,EAAO,OAAS,EAAA,SAAA,EAAW,OAAM,eAC/B,EAAA,QAAA,EAAA;AAAA,IAAA,IAAA,KAAS,MACR,mBAAA,GAAA;AAAA,MAAC,UAAA;AAAA,MAAA;AAAA,QACC,KAAM,EAAA,MAAA;AAAA,QACN,MAAQ,EAAA,GAAA;AAAA,QACR,QAAS,EAAA,MAAA;AAAA,QACT,eAAiB,EAAA,IAAA;AAAA,QACjB,WAAA,EAAA,CAAc,IAAQ,IAAA,IAAA,CAAK,MAAU,IAAA,GAAA;AAAA,QACrC,KAAO,EAAA,IAAA;AAAA,QACP,QAAU,EAAA,IAAA;AAAA,OAAA;AAAA,KACZ,mBAEC,GAAA,CAAA,KAAA,EAAA,EAAK,QAAK,EAAA,IAAA,EAAA,CAAA;AAAA,wBAEZ,eAAgB,EAAA,EAAA,IAAA,EAAK,QAAO,OAAS,EAAA,MAAM,MAAM,QAElD,EAAA,mBAAA,EAAA,CAAA;AAAA,GACF,EAAA,CAAA,CAAA;AAEJ;;;;"}