"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkhmcclinic_skeleton_app"] = self["webpackChunkhmcclinic_skeleton_app"] || []).push([["pages_PageOne_tsx"],{

/***/ "./components/testIds.ts":
/*!*******************************!*\
  !*** ./components/testIds.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   testIds: () => (/* binding */ testIds)\n/* harmony export */ });\nconst testIds = {\n    appConfig: {\n        apiKey: 'data-testid ac-api-key',\n        apiUrl: 'data-testid ac-api-url',\n        submit: 'data-testid ac-submit-form'\n    },\n    pageOne: {\n        container: 'data-testid pg-one-container',\n        navigateToFour: 'data-testid navigate-to-four'\n    },\n    pageTwo: {\n        container: 'data-testid pg-two-container'\n    },\n    pageThree: {\n        container: 'data-testid pg-three-container'\n    },\n    pageFour: {\n        container: 'data-testid pg-four-container',\n        navigateBack: 'data-testid navigate-back'\n    },\n    pageUnused: {\n        container: 'data-testid pg-unused-container'\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL3Rlc3RJZHMudHMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLE1BQU1BLFVBQVU7SUFDckJDLFdBQVc7UUFDVEMsUUFBUTtRQUNSQyxRQUFRO1FBQ1JDLFFBQVE7SUFDVjtJQUNBQyxTQUFTO1FBQ1BDLFdBQVc7UUFDWEMsZ0JBQWdCO0lBQ2xCO0lBQ0FDLFNBQVM7UUFDUEYsV0FBVztJQUNiO0lBQ0FHLFdBQVc7UUFDVEgsV0FBVztJQUNiO0lBQ0FJLFVBQVU7UUFDUkosV0FBVztRQUNYSyxjQUFjO0lBQ2hCO0lBQ0FDLFlBQVk7UUFDVk4sV0FBVztJQUNiO0FBQ0YsRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovL2htY2NsaW5pYy1za2VsZXRvbi1hcHAvLi9jb21wb25lbnRzL3Rlc3RJZHMudHM/MDA1OSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgdGVzdElkcyA9IHtcbiAgYXBwQ29uZmlnOiB7XG4gICAgYXBpS2V5OiAnZGF0YS10ZXN0aWQgYWMtYXBpLWtleScsXG4gICAgYXBpVXJsOiAnZGF0YS10ZXN0aWQgYWMtYXBpLXVybCcsXG4gICAgc3VibWl0OiAnZGF0YS10ZXN0aWQgYWMtc3VibWl0LWZvcm0nLFxuICB9LFxuICBwYWdlT25lOiB7XG4gICAgY29udGFpbmVyOiAnZGF0YS10ZXN0aWQgcGctb25lLWNvbnRhaW5lcicsXG4gICAgbmF2aWdhdGVUb0ZvdXI6ICdkYXRhLXRlc3RpZCBuYXZpZ2F0ZS10by1mb3VyJyxcbiAgfSxcbiAgcGFnZVR3bzoge1xuICAgIGNvbnRhaW5lcjogJ2RhdGEtdGVzdGlkIHBnLXR3by1jb250YWluZXInLFxuICB9LFxuICBwYWdlVGhyZWU6IHtcbiAgICBjb250YWluZXI6ICdkYXRhLXRlc3RpZCBwZy10aHJlZS1jb250YWluZXInLFxuICB9LFxuICBwYWdlRm91cjoge1xuICAgIGNvbnRhaW5lcjogJ2RhdGEtdGVzdGlkIHBnLWZvdXItY29udGFpbmVyJyxcbiAgICBuYXZpZ2F0ZUJhY2s6ICdkYXRhLXRlc3RpZCBuYXZpZ2F0ZS1iYWNrJyxcbiAgfSxcbiAgcGFnZVVudXNlZDoge1xuICAgIGNvbnRhaW5lcjogJ2RhdGEtdGVzdGlkIHBnLXVudXNlZC1jb250YWluZXInLFxuICB9LFxufTtcbiJdLCJuYW1lcyI6WyJ0ZXN0SWRzIiwiYXBwQ29uZmlnIiwiYXBpS2V5IiwiYXBpVXJsIiwic3VibWl0IiwicGFnZU9uZSIsImNvbnRhaW5lciIsIm5hdmlnYXRlVG9Gb3VyIiwicGFnZVR3byIsInBhZ2VUaHJlZSIsInBhZ2VGb3VyIiwibmF2aWdhdGVCYWNrIiwicGFnZVVudXNlZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./components/testIds.ts\n");

/***/ }),

/***/ "./getServiceMetrics.tsx":
/*!*******************************!*\
  !*** ./getServiceMetrics.tsx ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getServiceMetrics: () => (/* binding */ getServiceMetrics),\n/* harmony export */   printTree: () => (/* binding */ printTree)\n/* harmony export */ });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ \"./constants.ts\");\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n    try {\n        var info = gen[key](arg);\n        var value = info.value;\n    } catch (error) {\n        reject(error);\n        return;\n    }\n    if (info.done) {\n        resolve(value);\n    } else {\n        Promise.resolve(value).then(_next, _throw);\n    }\n}\nfunction _async_to_generator(fn) {\n    return function() {\n        var self = this, args = arguments;\n        return new Promise(function(resolve, reject) {\n            var gen = fn.apply(self, args);\n            function _next(value) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n            }\n            function _throw(err) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n            }\n            _next(undefined);\n        });\n    };\n}\n\nfunction getServiceMetrics(selectedService) {\n    return _getServiceMetrics.apply(this, arguments);\n}\nfunction _getServiceMetrics() {\n    _getServiceMetrics = _async_to_generator(function*(selectedService) {\n        // This function will take in a selected service as a string and return \n        // a list of all metrics (the leaves of the service metrics tree) and a tree structure for the whole metrics tree\n        try {\n            console.log(`Selected service: ${selectedService}`);\n            const response = yield fetch(`http://localhost:9080/metrics/find?query=${selectedService}.*`);\n            const services = yield response.json();\n            const flatList = [];\n            const tree = {};\n            // Function to build the tree and collect leaf metrics into the flat list\n            const buildTree = /*#__PURE__*/ function() {\n                var _ref = _async_to_generator(function*(service, treeNode) {\n                    if (service.leaf) {\n                        // Add leaf to flatList and tree\n                        if (!_constants__WEBPACK_IMPORTED_MODULE_0__.suffixSet.has(`.${service.text}`)) {\n                            // if the leaf text is not in the suffix set:\n                            flatList.push(service.id);\n                            treeNode[service.text] = null; // Leaf nodes in the tree are null\n                        }\n                    } else {\n                        // Create a new branch in the tree\n                        treeNode[service.text] = {};\n                        // Fetch children\n                        const childResponse = yield fetch(`http://localhost:9080/metrics/find?query=${service.id}.*`);\n                        const children = yield childResponse.json();\n                        if (children.length === 0) {\n                            // If no children, treat as a leaf\n                            flatList.push(service.id);\n                            treeNode[service.text] = null;\n                        } else {\n                            // Recursively process children\n                            yield Promise.all(children.map((child)=>buildTree(child, treeNode[service.text])));\n                            if (Object.keys(treeNode[service.text]).length === 0) {\n                                // check to see after we process all the children if any children remain. \n                                // if no children remain, this node is a leaf so treat it as one.\n                                treeNode[service.text] = null;\n                                flatList.push(service.id);\n                            }\n                        }\n                    }\n                });\n                return function buildTree(service, treeNode) {\n                    return _ref.apply(this, arguments);\n                };\n            }();\n            console.log(flatList);\n            // Build the tree and flat list by processing each root service\n            yield Promise.all(services.map((service)=>buildTree(service, tree)));\n            console.log(\"Flat List:\", flatList);\n            console.log(\"Tree Structure:\", tree);\n            return {\n                flatList,\n                tree\n            };\n        } catch (error) {\n            console.error(`Error fetching metrics for ${selectedService} from Graphite:`, error);\n            return {\n                flatList: [],\n                tree: {}\n            };\n        }\n    });\n    return _getServiceMetrics.apply(this, arguments);\n}\nfunction printTree(tree, indent = 0) {\n    const indentation = \"  \".repeat(indent); // Create indentation based on the depth of the node\n    for (const [key, value] of Object.entries(tree)){\n        if (value === null) {\n            // If it's a leaf node\n            console.log(`${indentation}- ${key}`);\n        } else {\n            // If it's a branch\n            console.log(`${indentation}+ ${key}`);\n            printTree(value, indent + 1); // Recurse into the branch\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QzdGLEtBQUssTUFBTSxDQUFDRyxLQUFLQyxNQUFNLElBQUlSLE9BQU9TLE9BQU8sQ0FBQ3pCLE1BQU87UUFDL0MsSUFBSXdCLFVBQVUsTUFBTTtZQUNsQixzQkFBc0I7WUFDdEIvQixRQUFRQyxHQUFHLENBQUMsQ0FBQyxFQUFFMkIsWUFBWSxFQUFFLEVBQUVFLElBQUksQ0FBQztRQUN0QyxPQUFPO1lBQ0wsbUJBQW1CO1lBQ25COUIsUUFBUUMsR0FBRyxDQUFDLENBQUMsRUFBRTJCLFlBQVksRUFBRSxFQUFFRSxJQUFJLENBQUM7WUFDcENKLFVBQVVLLE9BQU9KLFNBQVMsSUFBSSwwQkFBMEI7UUFDMUQ7SUFDRjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaG1jY2xpbmljLXNrZWxldG9uLWFwcC8uL2dldFNlcnZpY2VNZXRyaWNzLnRzeD8yMjQ0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNlcnZpY2VSZXNwb25zZSwgc3VmZml4U2V0IH0gZnJvbSAnLi9jb25zdGFudHMnO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0U2VydmljZU1ldHJpY3Moc2VsZWN0ZWRTZXJ2aWNlOiBzdHJpbmcpOiBQcm9taXNlPHsgZmxhdExpc3Q6IHN0cmluZ1tdOyB0cmVlOiBSZWNvcmQ8c3RyaW5nLCBhbnk+IH0+IHtcbiAgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIHRha2UgaW4gYSBzZWxlY3RlZCBzZXJ2aWNlIGFzIGEgc3RyaW5nIGFuZCByZXR1cm4gXG4gIC8vIGEgbGlzdCBvZiBhbGwgbWV0cmljcyAodGhlIGxlYXZlcyBvZiB0aGUgc2VydmljZSBtZXRyaWNzIHRyZWUpIGFuZCBhIHRyZWUgc3RydWN0dXJlIGZvciB0aGUgd2hvbGUgbWV0cmljcyB0cmVlXG5cbiAgdHJ5IHtcbiAgICBjb25zb2xlLmxvZyhgU2VsZWN0ZWQgc2VydmljZTogJHtzZWxlY3RlZFNlcnZpY2V9YCk7XG5cbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGBodHRwOi8vbG9jYWxob3N0OjkwODAvbWV0cmljcy9maW5kP3F1ZXJ5PSR7c2VsZWN0ZWRTZXJ2aWNlfS4qYCk7XG4gICAgY29uc3Qgc2VydmljZXM6IFNlcnZpY2VSZXNwb25zZVtdID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuXG4gICAgY29uc3QgZmxhdExpc3Q6IHN0cmluZ1tdID0gW107XG4gICAgY29uc3QgdHJlZTogUmVjb3JkPHN0cmluZywgYW55PiA9IHt9O1xuXG4gICAgLy8gRnVuY3Rpb24gdG8gYnVpbGQgdGhlIHRyZWUgYW5kIGNvbGxlY3QgbGVhZiBtZXRyaWNzIGludG8gdGhlIGZsYXQgbGlzdFxuICAgIGNvbnN0IGJ1aWxkVHJlZSA9IGFzeW5jIChzZXJ2aWNlOiBTZXJ2aWNlUmVzcG9uc2UsIHRyZWVOb2RlOiBhbnkpID0+IHtcbiAgICAgIGlmIChzZXJ2aWNlLmxlYWYpIHtcbiAgICAgICAgLy8gQWRkIGxlYWYgdG8gZmxhdExpc3QgYW5kIHRyZWVcbiAgICAgICAgaWYgKCFzdWZmaXhTZXQuaGFzKGAuJHtzZXJ2aWNlLnRleHR9YCkpIHtcbiAgICAgICAgICAvLyBpZiB0aGUgbGVhZiB0ZXh0IGlzIG5vdCBpbiB0aGUgc3VmZml4IHNldDpcbiAgICAgICAgICBmbGF0TGlzdC5wdXNoKHNlcnZpY2UuaWQpO1xuICAgICAgICAgIHRyZWVOb2RlW3NlcnZpY2UudGV4dF0gPSBudWxsOyAvLyBMZWFmIG5vZGVzIGluIHRoZSB0cmVlIGFyZSBudWxsXG4gICAgICAgIH0gXG5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIENyZWF0ZSBhIG5ldyBicmFuY2ggaW4gdGhlIHRyZWVcbiAgICAgICAgdHJlZU5vZGVbc2VydmljZS50ZXh0XSA9IHt9O1xuXG4gICAgICAgIC8vIEZldGNoIGNoaWxkcmVuXG4gICAgICAgIGNvbnN0IGNoaWxkUmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgaHR0cDovL2xvY2FsaG9zdDo5MDgwL21ldHJpY3MvZmluZD9xdWVyeT0ke3NlcnZpY2UuaWR9LipgKTtcbiAgICAgICAgY29uc3QgY2hpbGRyZW46IFNlcnZpY2VSZXNwb25zZVtdID0gYXdhaXQgY2hpbGRSZXNwb25zZS5qc29uKCk7XG5cbiAgICAgICAgaWYgKGNoaWxkcmVuLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIC8vIElmIG5vIGNoaWxkcmVuLCB0cmVhdCBhcyBhIGxlYWZcbiAgICAgICAgICBmbGF0TGlzdC5wdXNoKHNlcnZpY2UuaWQpO1xuICAgICAgICAgIHRyZWVOb2RlW3NlcnZpY2UudGV4dF0gPSBudWxsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIFJlY3Vyc2l2ZWx5IHByb2Nlc3MgY2hpbGRyZW5cbiAgICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChjaGlsZHJlbi5tYXAoKGNoaWxkKSA9PiBidWlsZFRyZWUoY2hpbGQsIHRyZWVOb2RlW3NlcnZpY2UudGV4dF0pKSk7XG5cbiAgICAgICAgICBpZiAoT2JqZWN0LmtleXModHJlZU5vZGVbc2VydmljZS50ZXh0XSkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAvLyBjaGVjayB0byBzZWUgYWZ0ZXIgd2UgcHJvY2VzcyBhbGwgdGhlIGNoaWxkcmVuIGlmIGFueSBjaGlsZHJlbiByZW1haW4uIFxuICAgICAgICAgICAgLy8gaWYgbm8gY2hpbGRyZW4gcmVtYWluLCB0aGlzIG5vZGUgaXMgYSBsZWFmIHNvIHRyZWF0IGl0IGFzIG9uZS5cbiAgICAgICAgICAgIHRyZWVOb2RlW3NlcnZpY2UudGV4dF0gPSBudWxsO1xuICAgICAgICAgICAgZmxhdExpc3QucHVzaChzZXJ2aWNlLmlkKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIGNvbnNvbGUubG9nKGZsYXRMaXN0KTtcbiAgICAvLyBCdWlsZCB0aGUgdHJlZSBhbmQgZmxhdCBsaXN0IGJ5IHByb2Nlc3NpbmcgZWFjaCByb290IHNlcnZpY2VcbiAgICBhd2FpdCBQcm9taXNlLmFsbChzZXJ2aWNlcy5tYXAoKHNlcnZpY2UpID0+IGJ1aWxkVHJlZShzZXJ2aWNlLCB0cmVlKSkpO1xuXG4gICAgY29uc29sZS5sb2coXCJGbGF0IExpc3Q6XCIsIGZsYXRMaXN0KTtcbiAgICBjb25zb2xlLmxvZyhcIlRyZWUgU3RydWN0dXJlOlwiLCB0cmVlKTtcblxuICAgIHJldHVybiB7IGZsYXRMaXN0LCB0cmVlIH07XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihgRXJyb3IgZmV0Y2hpbmcgbWV0cmljcyBmb3IgJHtzZWxlY3RlZFNlcnZpY2V9IGZyb20gR3JhcGhpdGU6YCwgZXJyb3IpO1xuICAgIHJldHVybiB7IGZsYXRMaXN0OiBbXSwgdHJlZToge30gfTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJpbnRUcmVlICh0cmVlOiBSZWNvcmQ8c3RyaW5nLCBhbnk+LCBpbmRlbnQgPSAwKTogdm9pZCB7XG4gIGNvbnN0IGluZGVudGF0aW9uID0gXCIgIFwiLnJlcGVhdChpbmRlbnQpOyAvLyBDcmVhdGUgaW5kZW50YXRpb24gYmFzZWQgb24gdGhlIGRlcHRoIG9mIHRoZSBub2RlXG4gIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHRyZWUpKSB7XG4gICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICAvLyBJZiBpdCdzIGEgbGVhZiBub2RlXG4gICAgICBjb25zb2xlLmxvZyhgJHtpbmRlbnRhdGlvbn0tICR7a2V5fWApO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBJZiBpdCdzIGEgYnJhbmNoXG4gICAgICBjb25zb2xlLmxvZyhgJHtpbmRlbnRhdGlvbn0rICR7a2V5fWApO1xuICAgICAgcHJpbnRUcmVlKHZhbHVlLCBpbmRlbnQgKyAxKTsgLy8gUmVjdXJzZSBpbnRvIHRoZSBicmFuY2hcbiAgICB9XG4gIH1cbn07XG4iXSwibmFtZXMiOlsic3VmZml4U2V0IiwiZ2V0U2VydmljZU1ldHJpY3MiLCJzZWxlY3RlZFNlcnZpY2UiLCJjb25zb2xlIiwibG9nIiwicmVzcG9uc2UiLCJmZXRjaCIsInNlcnZpY2VzIiwianNvbiIsImZsYXRMaXN0IiwidHJlZSIsImJ1aWxkVHJlZSIsInNlcnZpY2UiLCJ0cmVlTm9kZSIsImxlYWYiLCJoYXMiLCJ0ZXh0IiwicHVzaCIsImlkIiwiY2hpbGRSZXNwb25zZSIsImNoaWxkcmVuIiwibGVuZ3RoIiwiUHJvbWlzZSIsImFsbCIsIm1hcCIsImNoaWxkIiwiT2JqZWN0Iiwia2V5cyIsImVycm9yIiwicHJpbnRUcmVlIiwiaW5kZW50IiwiaW5kZW50YXRpb24iLCJyZXBlYXQiLCJrZXkiLCJ2YWx1ZSIsImVudHJpZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./getServiceMetrics.tsx\n");

/***/ }),

/***/ "./pages/PageOne.tsx":
/*!***************************!*\
  !*** ./pages/PageOne.tsx ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _emotion_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @emotion/css */ \"@emotion/css\");\n/* harmony import */ var _emotion_css__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_emotion_css__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @grafana/ui */ \"@grafana/ui\");\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _utils_utils_routing__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/utils.routing */ \"./utils/utils.routing.ts\");\n/* harmony import */ var _components_testIds__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../components/testIds */ \"./components/testIds.ts\");\n/* harmony import */ var _grafana_runtime__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @grafana/runtime */ \"@grafana/runtime\");\n/* harmony import */ var _grafana_runtime__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_grafana_runtime__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _getServiceMetrics__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../getServiceMetrics */ \"./getServiceMetrics.tsx\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../constants */ \"./constants.ts\");\n/* harmony import */ var react_icons_vsc__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! react-icons/vsc */ \"../node_modules/react-icons/vsc/index.mjs\");\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n    try {\n        var info = gen[key](arg);\n        var value = info.value;\n    } catch (error) {\n        reject(error);\n        return;\n    }\n    if (info.done) {\n        resolve(value);\n    } else {\n        Promise.resolve(value).then(_next, _throw);\n    }\n}\nfunction _async_to_generator(fn) {\n    return function() {\n        var self = this, args = arguments;\n        return new Promise(function(resolve, reject) {\n            var gen = fn.apply(self, args);\n            function _next(value) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n            }\n            function _throw(err) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n            }\n            _next(undefined);\n        });\n    };\n}\n\n\n\n\n\n\n\n\n\nfunction PageOne() {\n    const styles = (0,_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.useStyles2)(getStyles);\n    // State for selected options and available options\n    const [selectedService, setSelectedService] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [selectedDashboard, setSelectedDashboard] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [availableServices, setAvailableServices] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [availableDashboards, setAvailableDashboards] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [loadingServices, setLoadingServices] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [loadingDashboards, setLoadingDashboards] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [serviceError, setServiceError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [dashboardError, setDashboardError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [metricComparison, setMetricComparison] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        fetchAvailableServices();\n        fetchAvailableDashboards();\n    }, []);\n    const fetchAvailableServices = /*#__PURE__*/ function() {\n        var _ref = _async_to_generator(function*() {\n            setLoadingServices(true);\n            setServiceError(null);\n            try {\n                const response = yield fetch('http://localhost:9080/metrics/find?query=*'); // TODO: THIS SHOULD NOT BE HARDCODED. FIX THIS.\n                const services = yield response.json();\n                const formattedServices = services.map((service)=>({\n                        label: service.text,\n                        value: service.text\n                    }));\n                setAvailableServices(formattedServices);\n            } catch (error) {\n                console.error('Error fetching services from Graphite:', error);\n                setServiceError('Failed to load services');\n            } finally{\n                setLoadingServices(false);\n            }\n        });\n        return function fetchAvailableServices() {\n            return _ref.apply(this, arguments);\n        };\n    }();\n    const fetchAvailableDashboards = /*#__PURE__*/ function() {\n        var _ref = _async_to_generator(function*() {\n            setLoadingDashboards(true);\n            setDashboardError(null);\n            try {\n                const dashboards = yield (0,_grafana_runtime__WEBPACK_IMPORTED_MODULE_5__.getBackendSrv)().get('/api/search');\n                const formattedDashboards = dashboards.map((dash)=>({\n                        label: dash.title,\n                        value: dash.uid\n                    }));\n                setAvailableDashboards(formattedDashboards);\n            } catch (error) {\n                console.error('Error fetching dashboards:', error);\n                setDashboardError('Failed to load dashboards');\n            } finally{\n                setLoadingDashboards(false);\n            }\n        });\n        return function fetchAvailableDashboards() {\n            return _ref.apply(this, arguments);\n        };\n    }();\n    function getUsedMetrics() {\n        return _getUsedMetrics.apply(this, arguments);\n    }\n    function _getUsedMetrics() {\n        _getUsedMetrics = _async_to_generator(function*() {\n            if (!selectedService || !selectedDashboard) {\n                console.error(\"Required selections or formatted metrics are missing.\");\n                return;\n            }\n            // Fetch the selected dashboard data to get metrics\n            const dashboard = yield (0,_grafana_runtime__WEBPACK_IMPORTED_MODULE_5__.getBackendSrv)().get(`/api/dashboards/uid/${selectedDashboard.value}`);\n            const dashboardPanels = dashboard.dashboard.panels || [];\n            let usedMetricsSet = new Set();\n            dashboardPanels.forEach((panel)=>{\n                if (panel.targets && Array.isArray(panel.targets)) {\n                    panel.targets.forEach((target)=>{\n                        if (target.target) {\n                            let targetMetric = target.target;\n                            // Regular expression to match any function at the start, followed by a metric name\n                            const functionRegex = /^[a-zA-Z0-9_]+\\((.*?)\\)$/;\n                            // If the target metric starts with a function, remove it and retain the metric name\n                            const match = targetMetric.match(functionRegex);\n                            if (match) {\n                                // Extract the part inside the parentheses (the actual metric name)\n                                targetMetric = match[1];\n                            }\n                            // Use regex to check if the target metric belongs to the selected service\n                            const serviceRegex = new RegExp(`(^|[^a-zA-Z0-9_])${selectedService.value}([^a-zA-Z0-9_]|$)`);\n                            if (serviceRegex.test(targetMetric)) {\n                                usedMetricsSet.add(targetMetric); // Add the metric without the function wrapper\n                            }\n                        }\n                    });\n                }\n            });\n            // Compare available metrics with the used metrics\n            let usedMetricsArray = Array.from(usedMetricsSet);\n            usedMetricsArray = removeRedundantSuffixes(usedMetricsArray);\n            console.log(`used Metrics Array ${usedMetricsArray}`);\n            return usedMetricsArray;\n        });\n        return _getUsedMetrics.apply(this, arguments);\n    }\n    function compareMetrics(formattedMetrics, metricTree) {\n        return _compareMetrics.apply(this, arguments);\n    }\n    function _compareMetrics() {\n        _compareMetrics = _async_to_generator(function*(formattedMetrics, metricTree) {\n            if (!selectedService || !selectedDashboard || !formattedMetrics) {\n                console.error(\"Required selections or formatted metrics are missing.\");\n                return;\n            }\n            try {\n                // Fetch available metrics\n                const availableMetrics = formattedMetrics;\n                console.log(\"Available Metrics:\", availableMetrics);\n                // Fetch used metrics\n                let usedMetrics = yield getUsedMetrics();\n                if (!usedMetrics) {\n                    usedMetrics = [];\n                }\n                console.log(`Used Metrics ${usedMetrics}`);\n                let unusedMetrics = new Array();\n                // Helper function to check if a metric matches any of the used metrics (with wildcard support)\n                const matchesUsedMetric = (metric, usedMetrics)=>{\n                    return usedMetrics.some((usedMetric)=>{\n                        try {\n                            const regexPattern = `^${usedMetric.replace(/\\./g, '\\\\.').replace(/\\*/g, '.*')}$`;\n                            const regex = new RegExp(regexPattern);\n                            console.log(`Tested regex pattern ${regexPattern} on ${metric}, ${regex.test(metric)}`);\n                            return regex.test(metric);\n                        } catch (error) {\n                            console.error(\"Invalid regex in used metric:\", usedMetric, error);\n                            return false;\n                        }\n                    });\n                };\n                // Recursive function to traverse the metric tree\n                const traverseTree = (node, currentPath)=>{\n                    for(const key in node){\n                        const newPath = currentPath ? `${currentPath}.${key}` : key;\n                        if (node[key] === null) {\n                            // It's a leaf node\n                            if (!matchesUsedMetric(newPath, usedMetrics)) {\n                                unusedMetrics.push(newPath);\n                            }\n                        } else {\n                            // It's a branch; recurse into it\n                            traverseTree(node[key], newPath);\n                        }\n                    }\n                };\n                // Start traversing from the root of the metric tree\n                traverseTree(metricTree, selectedService.value);\n                console.log(\"Unused Metrics:\", unusedMetrics);\n                // Set the comparison result\n                setMetricComparison({\n                    usedMetrics: usedMetrics,\n                    unusedMetrics: unusedMetrics\n                });\n            } catch (error) {\n                console.error(\"Error comparing metrics:\", error);\n            }\n        });\n        return _compareMetrics.apply(this, arguments);\n    }\n    ;\n    // Trigger comparison when both service and dashboard are selected\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const fetchAndCompareMetrics = /*#__PURE__*/ function() {\n            var _ref = _async_to_generator(function*() {\n                if (selectedService && selectedDashboard) {\n                    try {\n                        const result = yield (0,_getServiceMetrics__WEBPACK_IMPORTED_MODULE_6__.getServiceMetrics)(selectedService.label); // Fetch formatted metrics\n                        const formattedMetrics = result.flatList;\n                        const treeMetrics = result.tree;\n                        (0,_getServiceMetrics__WEBPACK_IMPORTED_MODULE_6__.printTree)(treeMetrics);\n                        yield compareMetrics(formattedMetrics, treeMetrics); // Compare metrics\n                    } catch (error) {\n                        console.error('Error in fetching or comparing metrics:', error);\n                    }\n                }\n            });\n            return function fetchAndCompareMetrics() {\n                return _ref.apply(this, arguments);\n            };\n        }();\n        fetchAndCompareMetrics();\n    }, [\n        selectedService,\n        selectedDashboard\n    ]);\n    const removeRedundantSuffixes = (metrics)=>{\n        // removes redundant suffixes from metric names\n        const groupedMetrics = new Set();\n        metrics.forEach((label)=>{\n            for (let suffix of _constants__WEBPACK_IMPORTED_MODULE_7__.suffixSet){\n                if (label.endsWith(suffix)) {\n                    const prefix = label.slice(0, label.length - suffix.length);\n                    if (!groupedMetrics.has(prefix)) {\n                        groupedMetrics.add(prefix);\n                    }\n                    break; // Only match one suffix\n                }\n            }\n        });\n        // Build new Option objects with formatted labels\n        const formattedMetrics = [];\n        groupedMetrics.forEach((prefix)=>{\n            formattedMetrics.push(prefix);\n        });\n        return formattedMetrics;\n    };\n    // take in a flat list of metrics and format them as a tree structure\n    const formatAsTree = (metrics)=>{\n        const tree = {};\n        metrics.forEach((metric)=>{\n            const parts = metric.split('.');\n            let currentLevel = tree;\n            parts.forEach((part, index)=>{\n                if (!currentLevel[part]) {\n                    currentLevel[part] = index === parts.length - 1 ? null : {};\n                }\n                currentLevel = currentLevel[part];\n            });\n        });\n        return tree;\n    };\n    // Tree Node Component in React (for rendering expandable lists)\n    const TreeNode = ({ label, children })=>{\n        const [isExpanded, setIsExpanded] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n        const toggleExpansion = ()=>{\n            setIsExpanded(!isExpanded);\n        };\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n            style: {\n                marginLeft: '20px'\n            }\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n            onClick: toggleExpansion,\n            style: {\n                cursor: 'pointer',\n                fontWeight: children ? 'bold' : 'normal'\n            }\n        }, children ? isExpanded ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(react_icons_vsc__WEBPACK_IMPORTED_MODULE_8__.VscChevronRight, null) : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(react_icons_vsc__WEBPACK_IMPORTED_MODULE_8__.VscChevronDown, null) : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(react_icons_vsc__WEBPACK_IMPORTED_MODULE_8__.VscIndent, null), \" \", label), isExpanded && children && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", null, children));\n    };\n    const Tree = ({ data })=>{\n        const renderTree = (node)=>{\n            return Object.keys(node).map((key)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(TreeNode, {\n                    key: key,\n                    label: key\n                }, node[key] !== null && typeof node[key] === 'object' ? renderTree(node[key]) : null));\n        };\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", null, renderTree(data));\n    };\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_runtime__WEBPACK_IMPORTED_MODULE_5__.PluginPage, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        \"data-testid\": _components_testIds__WEBPACK_IMPORTED_MODULE_4__.testIds.pageOne.container\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: styles.marginTop\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Select, {\n        options: availableServices,\n        value: selectedService,\n        onChange: setSelectedService,\n        placeholder: \"Select Service\",\n        isLoading: loadingServices\n    }), serviceError && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: styles.error\n    }, serviceError)), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: styles.marginTop\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Select, {\n        options: availableDashboards,\n        value: selectedDashboard,\n        onChange: setSelectedDashboard,\n        placeholder: \"Select Dashboard\",\n        isLoading: loadingDashboards\n    }), dashboardError && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: styles.error\n    }, dashboardError)), metricComparison && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: styles.marginTop\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"h4\", null, \"Metric Comparison:\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"strong\", null, \"Used Metrics:\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"ul\", null, metricComparison.usedMetrics && metricComparison.usedMetrics.length > 0 ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Tree, {\n        data: formatAsTree(metricComparison.usedMetrics)\n    }) : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"p\", null, \"No used metrics.\"))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"strong\", null, \"Unused Metrics:\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"ul\", null, metricComparison.unusedMetrics && metricComparison.unusedMetrics.length > 0 ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Tree, {\n        data: formatAsTree(metricComparison.unusedMetrics)\n    }) : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"p\", null, \"No unused metrics.\")))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: styles.marginTop\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.LinkButton, {\n        \"data-testid\": _components_testIds__WEBPACK_IMPORTED_MODULE_4__.testIds.pageOne.navigateToFour,\n        href: (0,_utils_utils_routing__WEBPACK_IMPORTED_MODULE_3__.prefixRoute)(_constants__WEBPACK_IMPORTED_MODULE_7__.ROUTES.Four)\n    }, \"Full-width page example\"))));\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (PageOne);\n// Styles\nconst getStyles = (theme)=>({\n        marginTop: (0,_emotion_css__WEBPACK_IMPORTED_MODULE_1__.css)`\n    margin-top: ${theme.spacing(2)};\n  `,\n        error: (0,_emotion_css__WEBPACK_IMPORTED_MODULE_1__.css)`\n    color: ${theme.colors.error.text};\n    margin-top: ${theme.spacing(1)};\n  `\n    });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./pages/PageOne.tsx\n");

/***/ }),

/***/ "./utils/utils.routing.ts":
/*!********************************!*\
  !*** ./utils/utils.routing.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   prefixRoute: () => (/* binding */ prefixRoute)\n/* harmony export */ });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants */ \"./constants.ts\");\n\n// Prefixes the route with the base URL of the plugin\nfunction prefixRoute(route) {\n    return `${_constants__WEBPACK_IMPORTED_MODULE_0__.PLUGIN_BASE_URL}/${route}`;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi91dGlscy91dGlscy5yb3V0aW5nLnRzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQStDO0FBRS9DLHFEQUFxRDtBQUM5QyxTQUFTQyxZQUFZQyxLQUFhO0lBQ3ZDLE9BQU8sQ0FBQyxFQUFFRix1REFBZUEsQ0FBQyxDQUFDLEVBQUVFLE1BQU0sQ0FBQztBQUN0QyIsInNvdXJjZXMiOlsid2VicGFjazovL2htY2NsaW5pYy1za2VsZXRvbi1hcHAvLi91dGlscy91dGlscy5yb3V0aW5nLnRzPzRjNzkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUExVR0lOX0JBU0VfVVJMIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcblxuLy8gUHJlZml4ZXMgdGhlIHJvdXRlIHdpdGggdGhlIGJhc2UgVVJMIG9mIHRoZSBwbHVnaW5cbmV4cG9ydCBmdW5jdGlvbiBwcmVmaXhSb3V0ZShyb3V0ZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuIGAke1BMVUdJTl9CQVNFX1VSTH0vJHtyb3V0ZX1gO1xufVxuIl0sIm5hbWVzIjpbIlBMVUdJTl9CQVNFX1VSTCIsInByZWZpeFJvdXRlIiwicm91dGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./utils/utils.routing.ts\n");

/***/ })

}]);