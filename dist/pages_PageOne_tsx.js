"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkhmcclinic_skeleton_app"] = self["webpackChunkhmcclinic_skeleton_app"] || []).push([["pages_PageOne_tsx"],{

/***/ "./components/testIds.ts":
/*!*******************************!*\
  !*** ./components/testIds.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   testIds: () => (/* binding */ testIds)\n/* harmony export */ });\nconst testIds = {\n    appConfig: {\n        apiKey: 'data-testid ac-api-key',\n        apiUrl: 'data-testid ac-api-url',\n        submit: 'data-testid ac-submit-form'\n    },\n    pageOne: {\n        container: 'data-testid pg-one-container',\n        navigateToFour: 'data-testid navigate-to-four'\n    },\n    pageTwo: {\n        container: 'data-testid pg-two-container'\n    },\n    pageThree: {\n        container: 'data-testid pg-three-container'\n    },\n    pageFour: {\n        container: 'data-testid pg-four-container',\n        navigateBack: 'data-testid navigate-back'\n    },\n    pageUnused: {\n        container: 'data-testid pg-unused-container'\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL3Rlc3RJZHMudHMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLE1BQU1BLFVBQVU7SUFDckJDLFdBQVc7UUFDVEMsUUFBUTtRQUNSQyxRQUFRO1FBQ1JDLFFBQVE7SUFDVjtJQUNBQyxTQUFTO1FBQ1BDLFdBQVc7UUFDWEMsZ0JBQWdCO0lBQ2xCO0lBQ0FDLFNBQVM7UUFDUEYsV0FBVztJQUNiO0lBQ0FHLFdBQVc7UUFDVEgsV0FBVztJQUNiO0lBQ0FJLFVBQVU7UUFDUkosV0FBVztRQUNYSyxjQUFjO0lBQ2hCO0lBQ0FDLFlBQVk7UUFDVk4sV0FBVztJQUNiO0FBQ0YsRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovL2htY2NsaW5pYy1za2VsZXRvbi1hcHAvLi9jb21wb25lbnRzL3Rlc3RJZHMudHM/MDA1OSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgdGVzdElkcyA9IHtcbiAgYXBwQ29uZmlnOiB7XG4gICAgYXBpS2V5OiAnZGF0YS10ZXN0aWQgYWMtYXBpLWtleScsXG4gICAgYXBpVXJsOiAnZGF0YS10ZXN0aWQgYWMtYXBpLXVybCcsXG4gICAgc3VibWl0OiAnZGF0YS10ZXN0aWQgYWMtc3VibWl0LWZvcm0nLFxuICB9LFxuICBwYWdlT25lOiB7XG4gICAgY29udGFpbmVyOiAnZGF0YS10ZXN0aWQgcGctb25lLWNvbnRhaW5lcicsXG4gICAgbmF2aWdhdGVUb0ZvdXI6ICdkYXRhLXRlc3RpZCBuYXZpZ2F0ZS10by1mb3VyJyxcbiAgfSxcbiAgcGFnZVR3bzoge1xuICAgIGNvbnRhaW5lcjogJ2RhdGEtdGVzdGlkIHBnLXR3by1jb250YWluZXInLFxuICB9LFxuICBwYWdlVGhyZWU6IHtcbiAgICBjb250YWluZXI6ICdkYXRhLXRlc3RpZCBwZy10aHJlZS1jb250YWluZXInLFxuICB9LFxuICBwYWdlRm91cjoge1xuICAgIGNvbnRhaW5lcjogJ2RhdGEtdGVzdGlkIHBnLWZvdXItY29udGFpbmVyJyxcbiAgICBuYXZpZ2F0ZUJhY2s6ICdkYXRhLXRlc3RpZCBuYXZpZ2F0ZS1iYWNrJyxcbiAgfSxcbiAgcGFnZVVudXNlZDoge1xuICAgIGNvbnRhaW5lcjogJ2RhdGEtdGVzdGlkIHBnLXVudXNlZC1jb250YWluZXInLFxuICB9LFxufTtcbiJdLCJuYW1lcyI6WyJ0ZXN0SWRzIiwiYXBwQ29uZmlnIiwiYXBpS2V5IiwiYXBpVXJsIiwic3VibWl0IiwicGFnZU9uZSIsImNvbnRhaW5lciIsIm5hdmlnYXRlVG9Gb3VyIiwicGFnZVR3byIsInBhZ2VUaHJlZSIsInBhZ2VGb3VyIiwibmF2aWdhdGVCYWNrIiwicGFnZVVudXNlZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./components/testIds.ts\n");

/***/ }),

/***/ "./getServiceMetrics.tsx":
/*!*******************************!*\
  !*** ./getServiceMetrics.tsx ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getServiceMetrics: () => (/* binding */ getServiceMetrics)\n/* harmony export */ });\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n    try {\n        var info = gen[key](arg);\n        var value = info.value;\n    } catch (error) {\n        reject(error);\n        return;\n    }\n    if (info.done) {\n        resolve(value);\n    } else {\n        Promise.resolve(value).then(_next, _throw);\n    }\n}\nfunction _async_to_generator(fn) {\n    return function() {\n        var self = this, args = arguments;\n        return new Promise(function(resolve, reject) {\n            var gen = fn.apply(self, args);\n            function _next(value) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n            }\n            function _throw(err) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n            }\n            _next(undefined);\n        });\n    };\n}\nfunction getServiceMetrics(selectedService) {\n    return _getServiceMetrics.apply(this, arguments);\n}\nfunction _getServiceMetrics() {\n    _getServiceMetrics = _async_to_generator(function*(selectedService) {\n        try {\n            console.log(`selectedService ${selectedService}`);\n            const response = yield fetch(`http://localhost:9080/metrics/find?query=${selectedService}.*`);\n            const services = yield response.json();\n            const formattedServices = [];\n            console.log(`services ${services}`);\n            // Function to recursively fetch leaf metrics\n            const fetchLeaves = /*#__PURE__*/ function() {\n                var _ref = _async_to_generator(function*(service) {\n                    if (service.leaf) {\n                        // If it's a leaf, add to formattedServices\n                        formattedServices.push({\n                            label: service.id,\n                            value: service.id\n                        });\n                    } else {\n                        // Otherwise, fetch children\n                        const childResponse = yield fetch(`http://localhost:9080/metrics/find?query=${service.id}.*`);\n                        const children = yield childResponse.json();\n                        if (children.length === 0) {\n                            // If there are no children, add the service itself\n                            formattedServices.push(service.id);\n                        } else {\n                            // Otherwise, process children\n                            yield Promise.all(children.map(fetchLeaves));\n                        }\n                    }\n                });\n                return function fetchLeaves(service) {\n                    return _ref.apply(this, arguments);\n                };\n            }();\n            // Process each service\n            yield Promise.all(services.map(fetchLeaves));\n            const formattedMetrics = formattedServices;\n            let formattedMetricsStrings = new Array();\n            formattedMetrics.forEach((option)=>{\n                formattedMetricsStrings.push(option.label);\n            });\n            // setAvailableServices(formattedServices);\n            // setServiceMetrics(formattedMetrics);\n            // ADDED COMPARE METRICS ~~~~~~~~\n            // compareMetrics(formattedMetrics);\n            // \n            return formattedMetricsStrings;\n        } catch (error) {\n            console.error(`Error fetching metrics for ${selectedService} from Graphite:`, error);\n            //setMetricError('Failed to load metrics');\n            return [];\n        }\n    });\n    return _getServiceMetrics.apply(this, arguments);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9nZXRTZXJ2aWNlTWV0cmljcy50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRU8sU0FBZUEsa0JBQWtCQyxlQUF1QjtXQUF6Q0Q7O1NBQUFBO0lBQUFBLHFCQUFmLDhCQUFpQ0MsZUFBdUI7UUFDN0QsSUFBSTtZQUVGQyxRQUFRQyxHQUFHLENBQUMsQ0FBQyxnQkFBZ0IsRUFBRUYsZ0JBQWdCLENBQUM7WUFFaEQsTUFBTUcsV0FBVyxNQUFNQyxNQUFNLENBQUMseUNBQXlDLEVBQUVKLGdCQUFnQixFQUFFLENBQUM7WUFDNUYsTUFBTUssV0FBOEIsTUFBTUYsU0FBU0csSUFBSTtZQUV2RCxNQUFNQyxvQkFBOEIsRUFBRTtZQUV0Q04sUUFBUUMsR0FBRyxDQUFDLENBQUMsU0FBUyxFQUFFRyxTQUFTLENBQUM7WUFFbEMsNkNBQTZDO1lBQzdDLE1BQU1HOzJCQUFjLDhCQUFPQztvQkFDekIsSUFBSUEsUUFBUUMsSUFBSSxFQUFFO3dCQUNoQiwyQ0FBMkM7d0JBQzNDSCxrQkFBa0JJLElBQUksQ0FBQzs0QkFDckJDLE9BQU9ILFFBQVFJLEVBQUU7NEJBQ2pCQyxPQUFPTCxRQUFRSSxFQUFFO3dCQUNuQjtvQkFDRixPQUFPO3dCQUNMLDRCQUE0Qjt3QkFDNUIsTUFBTUUsZ0JBQWdCLE1BQU1YLE1BQU0sQ0FBQyx5Q0FBeUMsRUFBRUssUUFBUUksRUFBRSxDQUFDLEVBQUUsQ0FBQzt3QkFDNUYsTUFBTUcsV0FBOEIsTUFBTUQsY0FBY1QsSUFBSTt3QkFFNUQsSUFBSVUsU0FBU0MsTUFBTSxLQUFLLEdBQUc7NEJBQ3pCLG1EQUFtRDs0QkFDbkRWLGtCQUFrQkksSUFBSSxDQUFDRixRQUFRSSxFQUFFO3dCQUNuQyxPQUFPOzRCQUNMLDhCQUE4Qjs0QkFDOUIsTUFBTUssUUFBUUMsR0FBRyxDQUFDSCxTQUFTSSxHQUFHLENBQUNaO3dCQUNqQztvQkFDRjtnQkFDRjtnQ0FwQk1BLFlBQXFCQzs7OztZQXNCM0IsdUJBQXVCO1lBQ3ZCLE1BQU1TLFFBQVFDLEdBQUcsQ0FBQ2QsU0FBU2UsR0FBRyxDQUFDWjtZQUUvQixNQUFNYSxtQkFBbUJkO1lBRXpCLElBQUllLDBCQUFtQyxJQUFJQztZQUMzQ0YsaUJBQWlCRyxPQUFPLENBQUMsQ0FBQ0M7Z0JBQVlILHdCQUF3QlgsSUFBSSxDQUFDYyxPQUFPYixLQUFLO1lBQUM7WUFDMUUsMkNBQTJDO1lBRWpELHVDQUF1QztZQUl2QyxpQ0FBaUM7WUFDakMsb0NBQW9DO1lBQ3BDLEdBQUc7WUFDSCxPQUFPVTtRQUdULEVBQUUsT0FBT0ksT0FBTztZQUNkekIsUUFBUXlCLEtBQUssQ0FBQyxDQUFDLDJCQUEyQixFQUFFMUIsZ0JBQWdCLGVBQWUsQ0FBQyxFQUFFMEI7WUFDOUUsMkNBQTJDO1lBQzVDLE9BQU8sRUFBRTtRQUNWO0lBQ0Y7V0EzRHNCM0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9obWNjbGluaWMtc2tlbGV0b24tYXBwLy4vZ2V0U2VydmljZU1ldHJpY3MudHN4PzIyNDQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT3B0aW9uLCBTZXJ2aWNlUmVzcG9uc2UgfSBmcm9tICcuL2NvbnN0YW50cyc7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRTZXJ2aWNlTWV0cmljcyhzZWxlY3RlZFNlcnZpY2U6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nW10+IHtcbiAgdHJ5IHtcbiAgICBcbiAgICBjb25zb2xlLmxvZyhgc2VsZWN0ZWRTZXJ2aWNlICR7c2VsZWN0ZWRTZXJ2aWNlfWApO1xuXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgaHR0cDovL2xvY2FsaG9zdDo5MDgwL21ldHJpY3MvZmluZD9xdWVyeT0ke3NlbGVjdGVkU2VydmljZX0uKmApO1xuICAgIGNvbnN0IHNlcnZpY2VzOiBTZXJ2aWNlUmVzcG9uc2VbXSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICBcbiAgICBjb25zdCBmb3JtYXR0ZWRTZXJ2aWNlczogT3B0aW9uW10gPSBbXTtcbiAgICBcbiAgICBjb25zb2xlLmxvZyhgc2VydmljZXMgJHtzZXJ2aWNlc31gKTtcblxuICAgIC8vIEZ1bmN0aW9uIHRvIHJlY3Vyc2l2ZWx5IGZldGNoIGxlYWYgbWV0cmljc1xuICAgIGNvbnN0IGZldGNoTGVhdmVzID0gYXN5bmMgKHNlcnZpY2U6IFNlcnZpY2VSZXNwb25zZSkgPT4ge1xuICAgICAgaWYgKHNlcnZpY2UubGVhZikge1xuICAgICAgICAvLyBJZiBpdCdzIGEgbGVhZiwgYWRkIHRvIGZvcm1hdHRlZFNlcnZpY2VzXG4gICAgICAgIGZvcm1hdHRlZFNlcnZpY2VzLnB1c2goe1xuICAgICAgICAgIGxhYmVsOiBzZXJ2aWNlLmlkLFxuICAgICAgICAgIHZhbHVlOiBzZXJ2aWNlLmlkLFxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE90aGVyd2lzZSwgZmV0Y2ggY2hpbGRyZW5cbiAgICAgICAgY29uc3QgY2hpbGRSZXNwb25zZSA9IGF3YWl0IGZldGNoKGBodHRwOi8vbG9jYWxob3N0OjkwODAvbWV0cmljcy9maW5kP3F1ZXJ5PSR7c2VydmljZS5pZH0uKmApO1xuICAgICAgICBjb25zdCBjaGlsZHJlbjogU2VydmljZVJlc3BvbnNlW10gPSBhd2FpdCBjaGlsZFJlc3BvbnNlLmpzb24oKTtcblxuICAgICAgICBpZiAoY2hpbGRyZW4ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgLy8gSWYgdGhlcmUgYXJlIG5vIGNoaWxkcmVuLCBhZGQgdGhlIHNlcnZpY2UgaXRzZWxmXG4gICAgICAgICAgZm9ybWF0dGVkU2VydmljZXMucHVzaChzZXJ2aWNlLmlkKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBPdGhlcndpc2UsIHByb2Nlc3MgY2hpbGRyZW5cbiAgICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChjaGlsZHJlbi5tYXAoZmV0Y2hMZWF2ZXMpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBQcm9jZXNzIGVhY2ggc2VydmljZVxuICAgIGF3YWl0IFByb21pc2UuYWxsKHNlcnZpY2VzLm1hcChmZXRjaExlYXZlcykpO1xuXG4gICAgY29uc3QgZm9ybWF0dGVkTWV0cmljcyA9IGZvcm1hdHRlZFNlcnZpY2VzO1xuXG4gICAgbGV0IGZvcm1hdHRlZE1ldHJpY3NTdHJpbmdzOnN0cmluZ1tdID0gbmV3IEFycmF5KCk7XG4gICAgZm9ybWF0dGVkTWV0cmljcy5mb3JFYWNoKChvcHRpb24pID0+IHtmb3JtYXR0ZWRNZXRyaWNzU3RyaW5ncy5wdXNoKG9wdGlvbi5sYWJlbCl9KTtcbiAgICAgICAgICAvLyBzZXRBdmFpbGFibGVTZXJ2aWNlcyhmb3JtYXR0ZWRTZXJ2aWNlcyk7XG5cbiAgICAvLyBzZXRTZXJ2aWNlTWV0cmljcyhmb3JtYXR0ZWRNZXRyaWNzKTtcbiAgICBcbiAgICBcblxuICAgIC8vIEFEREVEIENPTVBBUkUgTUVUUklDUyB+fn5+fn5+flxuICAgIC8vIGNvbXBhcmVNZXRyaWNzKGZvcm1hdHRlZE1ldHJpY3MpO1xuICAgIC8vIFxuICAgIHJldHVybiBmb3JtYXR0ZWRNZXRyaWNzU3RyaW5ncztcblxuXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihgRXJyb3IgZmV0Y2hpbmcgbWV0cmljcyBmb3IgJHtzZWxlY3RlZFNlcnZpY2V9IGZyb20gR3JhcGhpdGU6YCwgZXJyb3IpO1xuICAgIC8vc2V0TWV0cmljRXJyb3IoJ0ZhaWxlZCB0byBsb2FkIG1ldHJpY3MnKTtcbiAgIHJldHVybiBbXTtcbiAgfVxufSJdLCJuYW1lcyI6WyJnZXRTZXJ2aWNlTWV0cmljcyIsInNlbGVjdGVkU2VydmljZSIsImNvbnNvbGUiLCJsb2ciLCJyZXNwb25zZSIsImZldGNoIiwic2VydmljZXMiLCJqc29uIiwiZm9ybWF0dGVkU2VydmljZXMiLCJmZXRjaExlYXZlcyIsInNlcnZpY2UiLCJsZWFmIiwicHVzaCIsImxhYmVsIiwiaWQiLCJ2YWx1ZSIsImNoaWxkUmVzcG9uc2UiLCJjaGlsZHJlbiIsImxlbmd0aCIsIlByb21pc2UiLCJhbGwiLCJtYXAiLCJmb3JtYXR0ZWRNZXRyaWNzIiwiZm9ybWF0dGVkTWV0cmljc1N0cmluZ3MiLCJBcnJheSIsImZvckVhY2giLCJvcHRpb24iLCJlcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./getServiceMetrics.tsx\n");

/***/ }),

/***/ "./pages/PageOne.tsx":
/*!***************************!*\
  !*** ./pages/PageOne.tsx ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _emotion_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @emotion/css */ \"@emotion/css\");\n/* harmony import */ var _emotion_css__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_emotion_css__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @grafana/ui */ \"@grafana/ui\");\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _utils_utils_routing__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/utils.routing */ \"./utils/utils.routing.ts\");\n/* harmony import */ var _components_testIds__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../components/testIds */ \"./components/testIds.ts\");\n/* harmony import */ var _grafana_runtime__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @grafana/runtime */ \"@grafana/runtime\");\n/* harmony import */ var _grafana_runtime__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_grafana_runtime__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _getServiceMetrics__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../getServiceMetrics */ \"./getServiceMetrics.tsx\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../constants */ \"./constants.ts\");\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n    try {\n        var info = gen[key](arg);\n        var value = info.value;\n    } catch (error) {\n        reject(error);\n        return;\n    }\n    if (info.done) {\n        resolve(value);\n    } else {\n        Promise.resolve(value).then(_next, _throw);\n    }\n}\nfunction _async_to_generator(fn) {\n    return function() {\n        var self = this, args = arguments;\n        return new Promise(function(resolve, reject) {\n            var gen = fn.apply(self, args);\n            function _next(value) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n            }\n            function _throw(err) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n            }\n            _next(undefined);\n        });\n    };\n}\n\n\n\n\n\n\n\n\nfunction PageOne() {\n    const styles = (0,_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.useStyles2)(getStyles);\n    // State for selected options and available options\n    const [selectedService, setSelectedService] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [selectedDashboard, setSelectedDashboard] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [availableServices, setAvailableServices] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [availableDashboards, setAvailableDashboards] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [loadingServices, setLoadingServices] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [loadingDashboards, setLoadingDashboards] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [serviceError, setServiceError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [dashboardError, setDashboardError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [metricComparison, setMetricComparison] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        fetchAvailableServices();\n        fetchAvailableDashboards();\n    }, []);\n    const fetchAvailableServices = /*#__PURE__*/ function() {\n        var _ref = _async_to_generator(function*() {\n            setLoadingServices(true);\n            setServiceError(null);\n            try {\n                const response = yield fetch('http://localhost:9080/metrics/find?query=*'); // TODO: THIS SHOULD NOT BE HARDCODED. FIX THIS.\n                const services = yield response.json();\n                const formattedServices = services.map((service)=>({\n                        label: service.text,\n                        value: service.text\n                    }));\n                setAvailableServices(formattedServices);\n            } catch (error) {\n                console.error('Error fetching services from Graphite:', error);\n                setServiceError('Failed to load services');\n            } finally{\n                setLoadingServices(false);\n            }\n        });\n        return function fetchAvailableServices() {\n            return _ref.apply(this, arguments);\n        };\n    }();\n    const fetchAvailableDashboards = /*#__PURE__*/ function() {\n        var _ref = _async_to_generator(function*() {\n            setLoadingDashboards(true);\n            setDashboardError(null);\n            try {\n                const dashboards = yield (0,_grafana_runtime__WEBPACK_IMPORTED_MODULE_5__.getBackendSrv)().get('/api/search');\n                const formattedDashboards = dashboards.map((dash)=>({\n                        label: dash.title,\n                        value: dash.uid\n                    }));\n                setAvailableDashboards(formattedDashboards);\n            } catch (error) {\n                console.error('Error fetching dashboards:', error);\n                setDashboardError('Failed to load dashboards');\n            } finally{\n                setLoadingDashboards(false);\n            }\n        });\n        return function fetchAvailableDashboards() {\n            return _ref.apply(this, arguments);\n        };\n    }();\n    function getUsedMetrics() {\n        return _getUsedMetrics.apply(this, arguments);\n    }\n    function _getUsedMetrics() {\n        _getUsedMetrics = _async_to_generator(function*() {\n            if (!selectedService || !selectedDashboard) {\n                console.error(\"Required selections or formatted metrics are missing.\");\n                return;\n            }\n            // Fetch the selected dashboard data to get metrics\n            const dashboard = yield (0,_grafana_runtime__WEBPACK_IMPORTED_MODULE_5__.getBackendSrv)().get(`/api/dashboards/uid/${selectedDashboard.value}`);\n            const dashboardPanels = dashboard.dashboard.panels || [];\n            let usedMetricsSet = new Set();\n            dashboardPanels.forEach((panel)=>{\n                if (panel.targets && Array.isArray(panel.targets)) {\n                    panel.targets.forEach((target)=>{\n                        if (target.target) {\n                            let targetMetric = target.target;\n                            // Regular expression to match any function at the start, followed by a metric name\n                            const functionRegex = /^[a-zA-Z0-9_]+\\((.*?)\\)$/;\n                            // If the target metric starts with a function, remove it and retain the metric name\n                            const match = targetMetric.match(functionRegex);\n                            if (match) {\n                                // Extract the part inside the parentheses (the actual metric name)\n                                targetMetric = match[1];\n                            }\n                            // Use regex to check if the target metric belongs to the selected service\n                            const serviceRegex = new RegExp(`(^|[^a-zA-Z0-9_])${selectedService.value}([^a-zA-Z0-9_]|$)`);\n                            if (serviceRegex.test(targetMetric)) {\n                                usedMetricsSet.add(targetMetric); // Add the metric without the function wrapper\n                            }\n                        }\n                    });\n                }\n            });\n            // Compare available metrics with the used metrics\n            let usedMetricsArray = Array.from(usedMetricsSet);\n            usedMetricsArray = formatMetricsBySuffix(usedMetricsArray);\n            usedMetricsArray.forEach((metric)=>{\n                console.log(`usedMetric : ${metric.label}`);\n            });\n            console.log(`Unused Metrics Array ${usedMetricsArray}`);\n            return usedMetricsArray;\n        });\n        return _getUsedMetrics.apply(this, arguments);\n    }\n    function compareMetrics(formattedMetrics) {\n        return _compareMetrics.apply(this, arguments);\n    }\n    function _compareMetrics() {\n        _compareMetrics = _async_to_generator(function*(formattedMetrics) {\n            if (!selectedService || !selectedDashboard || !formattedMetrics) {\n                console.error(\"Required selections or formatted metrics are missing.\");\n                return;\n            }\n            try {\n                // Fetch available metrics\n                const availableMetrics = formattedMetrics;\n                console.log(\"Available Metrics:\", availableMetrics);\n                // Fetch used metrics\n                let usedMetricsArray = yield getUsedMetrics();\n                if (!usedMetricsArray) {\n                    usedMetricsArray = [];\n                }\n                // Find unused metrics\n                const unusedMetrics = availableMetrics.filter((availableMetric)=>!usedMetricsArray.some((usedMetric)=>{\n                        try {\n                            // Check if the available metric matches the used metric as a regex\n                            const regex = new RegExp(`^${usedMetric.replace(/\\./g, '\\\\.')}$`);\n                            return regex.test(availableMetric);\n                        } catch (error) {\n                            console.error(\"Invalid regex in used metric:\", usedMetric, error);\n                            return false;\n                        }\n                    }));\n                console.log(\"Unused Metrics:\", unusedMetrics);\n                // Set the comparison result\n                setMetricComparison({\n                    usedMetrics: usedMetricsArray,\n                    unusedMetrics: unusedMetrics\n                });\n            } catch (error) {\n                console.error(\"Error comparing metrics:\", error);\n            }\n        });\n        return _compareMetrics.apply(this, arguments);\n    }\n    ;\n    // Trigger comparison when both service and dashboard are selected\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const fetchAndCompareMetrics = /*#__PURE__*/ function() {\n            var _ref = _async_to_generator(function*() {\n                if (selectedService && selectedDashboard) {\n                    try {\n                        const formattedMetrics = yield (0,_getServiceMetrics__WEBPACK_IMPORTED_MODULE_6__.getServiceMetrics)(selectedService.label); // Fetch formatted metrics\n                        // Turn formattedMetrics into a list of strings instead of options\n                        let processedMetrics = formatMetricsBySuffix(formattedMetrics); //Process and format the metrics\n                        yield compareMetrics(processedMetrics); // Compare metrics\n                    } catch (error) {\n                        console.error('Error in fetching or comparing metrics:', error);\n                    }\n                }\n            });\n            return function fetchAndCompareMetrics() {\n                return _ref.apply(this, arguments);\n            };\n        }();\n        fetchAndCompareMetrics();\n    }, [\n        selectedService,\n        selectedDashboard\n    ]);\n    const formatMetricsBySuffix = (metrics)=>{\n        // Initialize map for prefix if not exists\n        // maps each metric (minus the suffix) to a frequency map of suffix occurances\n        const groupedMetrics = new Set();\n        // Step 1: Group metrics by prefix and count suffix occurrences\n        metrics.forEach((str)=>{\n            const label = str;\n            for (let suffix of _constants__WEBPACK_IMPORTED_MODULE_7__.suffixSet){\n                if (label.endsWith(suffix)) {\n                    const prefix = label.slice(0, label.length - suffix.length);\n                    if (!groupedMetrics.has(prefix)) {\n                        groupedMetrics.add(prefix);\n                    }\n                    break; // Only match one suffix\n                }\n            }\n        });\n        // Step 2: Build new Option objects with formatted labels\n        const formattedMetrics = [];\n        groupedMetrics.forEach((prefix)=>{\n            // let labelWithSuffixes = prefix;\n            // suffixCountMap.forEach((count, suffix) => {\n            //   labelWithSuffixes += ` ${suffix}(${count})`;\n            // });\n            formattedMetrics.push(prefix);\n        });\n        return formattedMetrics;\n    };\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_runtime__WEBPACK_IMPORTED_MODULE_5__.PluginPage, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        \"data-testid\": _components_testIds__WEBPACK_IMPORTED_MODULE_4__.testIds.pageOne.container\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"h3\", null, \"This is page one.\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: styles.marginTop\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Select, {\n        options: availableServices,\n        value: selectedService,\n        onChange: setSelectedService,\n        placeholder: \"Select Service\",\n        isLoading: loadingServices\n    }), serviceError && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: styles.error\n    }, serviceError)), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: styles.marginTop\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Select, {\n        options: availableDashboards,\n        value: selectedDashboard,\n        onChange: setSelectedDashboard,\n        placeholder: \"Select Dashboard\",\n        isLoading: loadingDashboards\n    }), dashboardError && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: styles.error\n    }, dashboardError)), metricComparison && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: styles.marginTop\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"h4\", null, \"Metric Comparison:\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"strong\", null, \"Used Metrics:\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"ul\", null, metricComparison.usedMetrics.map((metric)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"li\", {\n            key: metric\n        }, metric)))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"strong\", null, \"Unused Metrics:\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"ul\", null, metricComparison.unusedMetrics.map((metric)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"li\", {\n            key: metric\n        }, metric))))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: styles.marginTop\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.LinkButton, {\n        \"data-testid\": _components_testIds__WEBPACK_IMPORTED_MODULE_4__.testIds.pageOne.navigateToFour,\n        href: (0,_utils_utils_routing__WEBPACK_IMPORTED_MODULE_3__.prefixRoute)(_constants__WEBPACK_IMPORTED_MODULE_7__.ROUTES.Four)\n    }, \"Full-width page example\"))));\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (PageOne);\n// Styles\nconst getStyles = (theme)=>({\n        marginTop: (0,_emotion_css__WEBPACK_IMPORTED_MODULE_1__.css)`\n    margin-top: ${theme.spacing(2)};\n  `,\n        error: (0,_emotion_css__WEBPACK_IMPORTED_MODULE_1__.css)`\n    color: ${theme.colors.error.text};\n    margin-top: ${theme.spacing(1)};\n  `\n    });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFDNUUsS0FBSyxDQUFDRixJQUFJLENBQUM7Z0JBQ3JCLEVBQUU0RSxNQUFNQyxPQUFPLENBQUMsR0FBRztFQUNqQyxDQUFDO0lBQ0giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9obWNjbGluaWMtc2tlbGV0b24tYXBwLy4vcGFnZXMvUGFnZU9uZS50c3g/MmZmNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL2Nzcyc7XG5pbXBvcnQgeyBHcmFmYW5hVGhlbWUyIH0gZnJvbSAnQGdyYWZhbmEvZGF0YSc7XG5pbXBvcnQgeyBMaW5rQnV0dG9uLCB1c2VTdHlsZXMyLCBTZWxlY3QgfSBmcm9tICdAZ3JhZmFuYS91aSc7XG5pbXBvcnQgeyBwcmVmaXhSb3V0ZSB9IGZyb20gJy4uL3V0aWxzL3V0aWxzLnJvdXRpbmcnO1xuaW1wb3J0IHsgdGVzdElkcyB9IGZyb20gJy4uL2NvbXBvbmVudHMvdGVzdElkcyc7XG5pbXBvcnQgeyBQbHVnaW5QYWdlLCBnZXRCYWNrZW5kU3J2IH0gZnJvbSAnQGdyYWZhbmEvcnVudGltZSc7XG5pbXBvcnQgeyBnZXRTZXJ2aWNlTWV0cmljcyB9IGZyb20gJ2dldFNlcnZpY2VNZXRyaWNzJztcbmltcG9ydCB7IFJPVVRFUywgT3B0aW9uLCBTZXJ2aWNlUmVzcG9uc2UsIERhc2hib2FyZFJlc3BvbnNlLCBNZXRyaWNDb21wYXJpc29uLCBzdWZmaXhTZXQgfSBmcm9tICcuLi9jb25zdGFudHMnO1xuXG5mdW5jdGlvbiBQYWdlT25lKCkge1xuICBjb25zdCBzdHlsZXMgPSB1c2VTdHlsZXMyKGdldFN0eWxlcyk7XG5cbiAgLy8gU3RhdGUgZm9yIHNlbGVjdGVkIG9wdGlvbnMgYW5kIGF2YWlsYWJsZSBvcHRpb25zXG4gIGNvbnN0IFtzZWxlY3RlZFNlcnZpY2UsIHNldFNlbGVjdGVkU2VydmljZV0gPSB1c2VTdGF0ZTxPcHRpb24gfCBudWxsPihudWxsKTtcbiAgY29uc3QgW3NlbGVjdGVkRGFzaGJvYXJkLCBzZXRTZWxlY3RlZERhc2hib2FyZF0gPSB1c2VTdGF0ZTxPcHRpb24gfCBudWxsPihudWxsKTtcbiAgY29uc3QgW2F2YWlsYWJsZVNlcnZpY2VzLCBzZXRBdmFpbGFibGVTZXJ2aWNlc10gPSB1c2VTdGF0ZTxPcHRpb25bXT4oW10pO1xuICBjb25zdCBbYXZhaWxhYmxlRGFzaGJvYXJkcywgc2V0QXZhaWxhYmxlRGFzaGJvYXJkc10gPSB1c2VTdGF0ZTxPcHRpb25bXT4oW10pO1xuICBjb25zdCBbbG9hZGluZ1NlcnZpY2VzLCBzZXRMb2FkaW5nU2VydmljZXNdID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbbG9hZGluZ0Rhc2hib2FyZHMsIHNldExvYWRpbmdEYXNoYm9hcmRzXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW3NlcnZpY2VFcnJvciwgc2V0U2VydmljZUVycm9yXSA9IHVzZVN0YXRlPHN0cmluZyB8IG51bGw+KG51bGwpO1xuICBjb25zdCBbZGFzaGJvYXJkRXJyb3IsIHNldERhc2hib2FyZEVycm9yXSA9IHVzZVN0YXRlPHN0cmluZyB8IG51bGw+KG51bGwpO1xuICBjb25zdCBbbWV0cmljQ29tcGFyaXNvbiwgc2V0TWV0cmljQ29tcGFyaXNvbl0gPSB1c2VTdGF0ZTxNZXRyaWNDb21wYXJpc29uIHwgbnVsbD4obnVsbCk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBmZXRjaEF2YWlsYWJsZVNlcnZpY2VzKCk7XG4gICAgZmV0Y2hBdmFpbGFibGVEYXNoYm9hcmRzKCk7XG4gIH0sIFtdKTtcbiAgXG5cbiAgY29uc3QgZmV0Y2hBdmFpbGFibGVTZXJ2aWNlcyA9IGFzeW5jICgpID0+IHtcbiAgICBzZXRMb2FkaW5nU2VydmljZXModHJ1ZSk7XG4gICAgc2V0U2VydmljZUVycm9yKG51bGwpO1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCdodHRwOi8vbG9jYWxob3N0OjkwODAvbWV0cmljcy9maW5kP3F1ZXJ5PSonKTsgLy8gVE9ETzogVEhJUyBTSE9VTEQgTk9UIEJFIEhBUkRDT0RFRC4gRklYIFRISVMuXG4gICAgICBjb25zdCBzZXJ2aWNlczogU2VydmljZVJlc3BvbnNlW10gPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICBjb25zdCBmb3JtYXR0ZWRTZXJ2aWNlcyA9IHNlcnZpY2VzLm1hcCgoc2VydmljZSkgPT4gKHtcbiAgICAgICAgbGFiZWw6IHNlcnZpY2UudGV4dCxcbiAgICAgICAgdmFsdWU6IHNlcnZpY2UudGV4dCxcbiAgICAgIH0pKTtcbiAgICAgIHNldEF2YWlsYWJsZVNlcnZpY2VzKGZvcm1hdHRlZFNlcnZpY2VzKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgc2VydmljZXMgZnJvbSBHcmFwaGl0ZTonLCBlcnJvcik7XG4gICAgICBzZXRTZXJ2aWNlRXJyb3IoJ0ZhaWxlZCB0byBsb2FkIHNlcnZpY2VzJyk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHNldExvYWRpbmdTZXJ2aWNlcyhmYWxzZSk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGZldGNoQXZhaWxhYmxlRGFzaGJvYXJkcyA9IGFzeW5jICgpID0+IHtcbiAgICBzZXRMb2FkaW5nRGFzaGJvYXJkcyh0cnVlKTtcbiAgICBzZXREYXNoYm9hcmRFcnJvcihudWxsKTtcbiAgICB0cnkge1xuICAgICAgY29uc3QgZGFzaGJvYXJkczogRGFzaGJvYXJkUmVzcG9uc2VbXSA9IGF3YWl0IGdldEJhY2tlbmRTcnYoKS5nZXQoJy9hcGkvc2VhcmNoJyk7XG4gICAgICBjb25zdCBmb3JtYXR0ZWREYXNoYm9hcmRzID0gZGFzaGJvYXJkcy5tYXAoKGRhc2gpID0+ICh7XG4gICAgICAgIGxhYmVsOiBkYXNoLnRpdGxlLFxuICAgICAgICB2YWx1ZTogZGFzaC51aWQsXG4gICAgICB9KSk7XG4gICAgICBzZXRBdmFpbGFibGVEYXNoYm9hcmRzKGZvcm1hdHRlZERhc2hib2FyZHMpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBkYXNoYm9hcmRzOicsIGVycm9yKTtcbiAgICAgIHNldERhc2hib2FyZEVycm9yKCdGYWlsZWQgdG8gbG9hZCBkYXNoYm9hcmRzJyk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHNldExvYWRpbmdEYXNoYm9hcmRzKGZhbHNlKTtcbiAgICB9XG4gIH07XG5cbiAgYXN5bmMgZnVuY3Rpb24gZ2V0VXNlZE1ldHJpY3MoKSB7XG4gICAgaWYgKCFzZWxlY3RlZFNlcnZpY2UgfHwgIXNlbGVjdGVkRGFzaGJvYXJkICkge1xuICAgICAgY29uc29sZS5lcnJvcihcIlJlcXVpcmVkIHNlbGVjdGlvbnMgb3IgZm9ybWF0dGVkIG1ldHJpY3MgYXJlIG1pc3NpbmcuXCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBGZXRjaCB0aGUgc2VsZWN0ZWQgZGFzaGJvYXJkIGRhdGEgdG8gZ2V0IG1ldHJpY3NcbiAgICBjb25zdCBkYXNoYm9hcmQgPSBhd2FpdCBnZXRCYWNrZW5kU3J2KCkuZ2V0KGAvYXBpL2Rhc2hib2FyZHMvdWlkLyR7c2VsZWN0ZWREYXNoYm9hcmQudmFsdWV9YCk7XG4gICAgY29uc3QgZGFzaGJvYXJkUGFuZWxzID0gZGFzaGJvYXJkLmRhc2hib2FyZC5wYW5lbHMgfHwgW107XG5cbiAgICBsZXQgdXNlZE1ldHJpY3NTZXQ6IFNldDxzdHJpbmc+ID0gbmV3IFNldCgpO1xuXG4gICAgZGFzaGJvYXJkUGFuZWxzLmZvckVhY2goKHBhbmVsOiBhbnkpID0+IHtcbiAgICAgIGlmIChwYW5lbC50YXJnZXRzICYmIEFycmF5LmlzQXJyYXkocGFuZWwudGFyZ2V0cykpIHtcbiAgICAgICAgcGFuZWwudGFyZ2V0cy5mb3JFYWNoKCh0YXJnZXQ6IGFueSkgPT4ge1xuICAgICAgICAgIGlmICh0YXJnZXQudGFyZ2V0KSB7XG4gICAgICAgICAgICBsZXQgdGFyZ2V0TWV0cmljID0gdGFyZ2V0LnRhcmdldDtcbiAgICBcbiAgICAgICAgICAgIC8vIFJlZ3VsYXIgZXhwcmVzc2lvbiB0byBtYXRjaCBhbnkgZnVuY3Rpb24gYXQgdGhlIHN0YXJ0LCBmb2xsb3dlZCBieSBhIG1ldHJpYyBuYW1lXG4gICAgICAgICAgICBjb25zdCBmdW5jdGlvblJlZ2V4ID0gL15bYS16QS1aMC05X10rXFwoKC4qPylcXCkkLztcbiAgICBcbiAgICAgICAgICAgIC8vIElmIHRoZSB0YXJnZXQgbWV0cmljIHN0YXJ0cyB3aXRoIGEgZnVuY3Rpb24sIHJlbW92ZSBpdCBhbmQgcmV0YWluIHRoZSBtZXRyaWMgbmFtZVxuICAgICAgICAgICAgY29uc3QgbWF0Y2ggPSB0YXJnZXRNZXRyaWMubWF0Y2goZnVuY3Rpb25SZWdleCk7XG4gICAgICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgLy8gRXh0cmFjdCB0aGUgcGFydCBpbnNpZGUgdGhlIHBhcmVudGhlc2VzICh0aGUgYWN0dWFsIG1ldHJpYyBuYW1lKVxuICAgICAgICAgICAgICB0YXJnZXRNZXRyaWMgPSBtYXRjaFsxXTtcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIC8vIFVzZSByZWdleCB0byBjaGVjayBpZiB0aGUgdGFyZ2V0IG1ldHJpYyBiZWxvbmdzIHRvIHRoZSBzZWxlY3RlZCBzZXJ2aWNlXG4gICAgICAgICAgICBjb25zdCBzZXJ2aWNlUmVnZXggPSBuZXcgUmVnRXhwKGAoXnxbXmEtekEtWjAtOV9dKSR7c2VsZWN0ZWRTZXJ2aWNlLnZhbHVlfShbXmEtekEtWjAtOV9dfCQpYCk7XG4gICAgICAgICAgICBpZiAoc2VydmljZVJlZ2V4LnRlc3QodGFyZ2V0TWV0cmljKSkge1xuICAgICAgICAgICAgICB1c2VkTWV0cmljc1NldC5hZGQodGFyZ2V0TWV0cmljKTsgIC8vIEFkZCB0aGUgbWV0cmljIHdpdGhvdXQgdGhlIGZ1bmN0aW9uIHdyYXBwZXJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIFxuICAgIC8vIENvbXBhcmUgYXZhaWxhYmxlIG1ldHJpY3Mgd2l0aCB0aGUgdXNlZCBtZXRyaWNzXG4gICAgbGV0IHVzZWRNZXRyaWNzQXJyYXkgPSBBcnJheS5mcm9tKHVzZWRNZXRyaWNzU2V0KTtcbiAgICB1c2VkTWV0cmljc0FycmF5ID0gZm9ybWF0TWV0cmljc0J5U3VmZml4KHVzZWRNZXRyaWNzQXJyYXkpO1xuXG4gICAgdXNlZE1ldHJpY3NBcnJheS5mb3JFYWNoKChtZXRyaWM6YW55KSA9PiB7Y29uc29sZS5sb2coYHVzZWRNZXRyaWMgOiAke21ldHJpYy5sYWJlbH1gKX0pO1xuICAgIGNvbnNvbGUubG9nKGBVbnVzZWQgTWV0cmljcyBBcnJheSAke3VzZWRNZXRyaWNzQXJyYXl9YCk7XG4gICAgcmV0dXJuIHVzZWRNZXRyaWNzQXJyYXk7XG4gIH1cblxuICBhc3luYyBmdW5jdGlvbiBjb21wYXJlTWV0cmljcyhmb3JtYXR0ZWRNZXRyaWNzOiBzdHJpbmdbXSk6IFByb21pc2U8dm9pZD4ge1xuICAgIGlmICghc2VsZWN0ZWRTZXJ2aWNlIHx8ICFzZWxlY3RlZERhc2hib2FyZCB8fCAhZm9ybWF0dGVkTWV0cmljcykge1xuICAgICAgY29uc29sZS5lcnJvcihcIlJlcXVpcmVkIHNlbGVjdGlvbnMgb3IgZm9ybWF0dGVkIG1ldHJpY3MgYXJlIG1pc3NpbmcuXCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgXG4gICAgdHJ5IHtcbiAgICAgIC8vIEZldGNoIGF2YWlsYWJsZSBtZXRyaWNzXG4gICAgICBjb25zdCBhdmFpbGFibGVNZXRyaWNzID0gZm9ybWF0dGVkTWV0cmljcztcbiAgICAgIGNvbnNvbGUubG9nKFwiQXZhaWxhYmxlIE1ldHJpY3M6XCIsIGF2YWlsYWJsZU1ldHJpY3MpO1xuICBcbiAgICAgIC8vIEZldGNoIHVzZWQgbWV0cmljc1xuICAgICAgbGV0IHVzZWRNZXRyaWNzQXJyYXkgPSBhd2FpdCBnZXRVc2VkTWV0cmljcygpO1xuICAgICAgaWYgKCF1c2VkTWV0cmljc0FycmF5KSB7XG4gICAgICAgIHVzZWRNZXRyaWNzQXJyYXkgPSBbXTtcbiAgICAgIH1cbiAgXG4gICAgICAvLyBGaW5kIHVudXNlZCBtZXRyaWNzXG4gICAgICBjb25zdCB1bnVzZWRNZXRyaWNzID0gYXZhaWxhYmxlTWV0cmljcy5maWx0ZXIoXG4gICAgICAgIChhdmFpbGFibGVNZXRyaWMpID0+XG4gICAgICAgICAgIXVzZWRNZXRyaWNzQXJyYXkuc29tZSgodXNlZE1ldHJpYykgPT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIGF2YWlsYWJsZSBtZXRyaWMgbWF0Y2hlcyB0aGUgdXNlZCBtZXRyaWMgYXMgYSByZWdleFxuICAgICAgICAgICAgICBjb25zdCByZWdleCA9IG5ldyBSZWdFeHAoYF4ke3VzZWRNZXRyaWMucmVwbGFjZSgvXFwuL2csICdcXFxcLicpfSRgKTtcbiAgICAgICAgICAgICAgcmV0dXJuIHJlZ2V4LnRlc3QoYXZhaWxhYmxlTWV0cmljKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJJbnZhbGlkIHJlZ2V4IGluIHVzZWQgbWV0cmljOlwiLCB1c2VkTWV0cmljLCBlcnJvcik7XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgKTtcbiAgXG4gICAgICBjb25zb2xlLmxvZyhcIlVudXNlZCBNZXRyaWNzOlwiLCB1bnVzZWRNZXRyaWNzKTtcbiAgXG4gICAgICAvLyBTZXQgdGhlIGNvbXBhcmlzb24gcmVzdWx0XG4gICAgICBzZXRNZXRyaWNDb21wYXJpc29uKHtcbiAgICAgICAgdXNlZE1ldHJpY3M6IHVzZWRNZXRyaWNzQXJyYXksXG4gICAgICAgIHVudXNlZE1ldHJpY3M6IHVudXNlZE1ldHJpY3MsXG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGNvbXBhcmluZyBtZXRyaWNzOlwiLCBlcnJvcik7XG4gICAgfVxuICB9O1xuXG5cbiAgLy8gVHJpZ2dlciBjb21wYXJpc29uIHdoZW4gYm90aCBzZXJ2aWNlIGFuZCBkYXNoYm9hcmQgYXJlIHNlbGVjdGVkXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgZmV0Y2hBbmRDb21wYXJlTWV0cmljcyA9IGFzeW5jICgpID0+IHtcbiAgICAgIGlmIChzZWxlY3RlZFNlcnZpY2UgJiYgc2VsZWN0ZWREYXNoYm9hcmQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCBmb3JtYXR0ZWRNZXRyaWNzID0gYXdhaXQgZ2V0U2VydmljZU1ldHJpY3Moc2VsZWN0ZWRTZXJ2aWNlLmxhYmVsKTsgLy8gRmV0Y2ggZm9ybWF0dGVkIG1ldHJpY3NcbiAgICAgICAgICAvLyBUdXJuIGZvcm1hdHRlZE1ldHJpY3MgaW50byBhIGxpc3Qgb2Ygc3RyaW5ncyBpbnN0ZWFkIG9mIG9wdGlvbnNcbiAgICAgICAgICBcbiAgICAgICAgICBcbiAgICAgICAgICBcbiAgICAgICAgICBsZXQgcHJvY2Vzc2VkTWV0cmljcyA9IGZvcm1hdE1ldHJpY3NCeVN1ZmZpeChmb3JtYXR0ZWRNZXRyaWNzKTsgLy9Qcm9jZXNzIGFuZCBmb3JtYXQgdGhlIG1ldHJpY3NcbiAgICAgICAgICBcbiAgICAgICAgICBhd2FpdCBjb21wYXJlTWV0cmljcyhwcm9jZXNzZWRNZXRyaWNzKTsgLy8gQ29tcGFyZSBtZXRyaWNzXG5cbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBpbiBmZXRjaGluZyBvciBjb21wYXJpbmcgbWV0cmljczonLCBlcnJvcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIGZldGNoQW5kQ29tcGFyZU1ldHJpY3MoKTtcbiAgfSwgW3NlbGVjdGVkU2VydmljZSwgc2VsZWN0ZWREYXNoYm9hcmRdKTtcblxuICBjb25zdCBmb3JtYXRNZXRyaWNzQnlTdWZmaXggPSAobWV0cmljczogc3RyaW5nW10pOiBzdHJpbmdbXSA9PiB7XG4gICAgLy8gSW5pdGlhbGl6ZSBtYXAgZm9yIHByZWZpeCBpZiBub3QgZXhpc3RzXG4gICAgLy8gbWFwcyBlYWNoIG1ldHJpYyAobWludXMgdGhlIHN1ZmZpeCkgdG8gYSBmcmVxdWVuY3kgbWFwIG9mIHN1ZmZpeCBvY2N1cmFuY2VzXG4gICAgY29uc3QgZ3JvdXBlZE1ldHJpY3MgPSBuZXcgU2V0PHN0cmluZz4oKTtcblxuICAgIC8vIFN0ZXAgMTogR3JvdXAgbWV0cmljcyBieSBwcmVmaXggYW5kIGNvdW50IHN1ZmZpeCBvY2N1cnJlbmNlc1xuICAgIG1ldHJpY3MuZm9yRWFjaCgoc3RyKSA9PiB7XG4gICAgICBjb25zdCBsYWJlbCA9IHN0cjtcbiAgICAgIGZvciAobGV0IHN1ZmZpeCBvZiBzdWZmaXhTZXQpIHtcbiAgICAgICAgaWYgKGxhYmVsLmVuZHNXaXRoKHN1ZmZpeCkpIHtcbiAgICAgICAgICBjb25zdCBwcmVmaXggPSBsYWJlbC5zbGljZSgwLCBsYWJlbC5sZW5ndGggLSBzdWZmaXgubGVuZ3RoKTtcblxuICAgICAgICAgIFxuICAgICAgICAgIGlmICghZ3JvdXBlZE1ldHJpY3MuaGFzKHByZWZpeCkpIHtcbiAgICAgICAgICAgIGdyb3VwZWRNZXRyaWNzLmFkZChwcmVmaXgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrOyAvLyBPbmx5IG1hdGNoIG9uZSBzdWZmaXhcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gU3RlcCAyOiBCdWlsZCBuZXcgT3B0aW9uIG9iamVjdHMgd2l0aCBmb3JtYXR0ZWQgbGFiZWxzXG4gICAgY29uc3QgZm9ybWF0dGVkTWV0cmljczogc3RyaW5nW10gPSBbXTtcbiAgICBncm91cGVkTWV0cmljcy5mb3JFYWNoKChwcmVmaXgpID0+IHtcbiAgICAgIC8vIGxldCBsYWJlbFdpdGhTdWZmaXhlcyA9IHByZWZpeDtcbiAgICAgIC8vIHN1ZmZpeENvdW50TWFwLmZvckVhY2goKGNvdW50LCBzdWZmaXgpID0+IHtcbiAgICAgIC8vICAgbGFiZWxXaXRoU3VmZml4ZXMgKz0gYCAke3N1ZmZpeH0oJHtjb3VudH0pYDtcbiAgICAgIC8vIH0pO1xuICAgICAgZm9ybWF0dGVkTWV0cmljcy5wdXNoKHByZWZpeCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGZvcm1hdHRlZE1ldHJpY3M7XG4gIH07XG5cbiAgcmV0dXJuIChcbiAgICA8UGx1Z2luUGFnZT5cbiAgICAgIDxkaXYgZGF0YS10ZXN0aWQ9e3Rlc3RJZHMucGFnZU9uZS5jb250YWluZXJ9PlxuICAgICAgICA8aDM+VGhpcyBpcyBwYWdlIG9uZS48L2gzPlxuXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMubWFyZ2luVG9wfT5cbiAgICAgICAgICA8U2VsZWN0XG4gICAgICAgICAgICBvcHRpb25zPXthdmFpbGFibGVTZXJ2aWNlc31cbiAgICAgICAgICAgIHZhbHVlPXtzZWxlY3RlZFNlcnZpY2V9XG4gICAgICAgICAgICBvbkNoYW5nZT17c2V0U2VsZWN0ZWRTZXJ2aWNlfVxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJTZWxlY3QgU2VydmljZVwiXG4gICAgICAgICAgICBpc0xvYWRpbmc9e2xvYWRpbmdTZXJ2aWNlc31cbiAgICAgICAgICAvPlxuICAgICAgICAgIHtzZXJ2aWNlRXJyb3IgJiYgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5lcnJvcn0+e3NlcnZpY2VFcnJvcn08L2Rpdj59XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMubWFyZ2luVG9wfT5cbiAgICAgICAgICA8U2VsZWN0XG4gICAgICAgICAgICBvcHRpb25zPXthdmFpbGFibGVEYXNoYm9hcmRzfVxuICAgICAgICAgICAgdmFsdWU9e3NlbGVjdGVkRGFzaGJvYXJkfVxuICAgICAgICAgICAgb25DaGFuZ2U9e3NldFNlbGVjdGVkRGFzaGJvYXJkfVxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJTZWxlY3QgRGFzaGJvYXJkXCJcbiAgICAgICAgICAgIGlzTG9hZGluZz17bG9hZGluZ0Rhc2hib2FyZHN9XG4gICAgICAgICAgLz5cbiAgICAgICAgICB7ZGFzaGJvYXJkRXJyb3IgJiYgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5lcnJvcn0+e2Rhc2hib2FyZEVycm9yfTwvZGl2Pn1cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAge21ldHJpY0NvbXBhcmlzb24gJiYgKFxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMubWFyZ2luVG9wfT5cbiAgICAgICAgICAgIDxoND5NZXRyaWMgQ29tcGFyaXNvbjo8L2g0PlxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgPHN0cm9uZz5Vc2VkIE1ldHJpY3M6PC9zdHJvbmc+XG4gICAgICAgICAgICAgIDx1bD5cbiAgICAgICAgICAgICAgICB7bWV0cmljQ29tcGFyaXNvbi51c2VkTWV0cmljcy5tYXAoKG1ldHJpYykgPT4gKFxuICAgICAgICAgICAgICAgICAgPGxpIGtleT17bWV0cmljfT57bWV0cmljfTwvbGk+XG4gICAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgIDxzdHJvbmc+VW51c2VkIE1ldHJpY3M6PC9zdHJvbmc+XG4gICAgICAgICAgICAgIDx1bD5cbiAgICAgICAgICAgICAgICB7bWV0cmljQ29tcGFyaXNvbi51bnVzZWRNZXRyaWNzLm1hcCgobWV0cmljKSA9PiAoXG4gICAgICAgICAgICAgICAgICA8bGkga2V5PXttZXRyaWN9PnttZXRyaWN9PC9saT5cbiAgICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApfVxuXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMubWFyZ2luVG9wfT5cbiAgICAgICAgICA8TGlua0J1dHRvbiBkYXRhLXRlc3RpZD17dGVzdElkcy5wYWdlT25lLm5hdmlnYXRlVG9Gb3VyfSBocmVmPXtwcmVmaXhSb3V0ZShST1VURVMuRm91cil9PlxuICAgICAgICAgICAgRnVsbC13aWR0aCBwYWdlIGV4YW1wbGVcbiAgICAgICAgICA8L0xpbmtCdXR0b24+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9QbHVnaW5QYWdlPlxuICApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBQYWdlT25lO1xuXG4vLyBTdHlsZXNcbmNvbnN0IGdldFN0eWxlcyA9ICh0aGVtZTogR3JhZmFuYVRoZW1lMikgPT4gKHtcbiAgbWFyZ2luVG9wOiBjc3NgXG4gICAgbWFyZ2luLXRvcDogJHt0aGVtZS5zcGFjaW5nKDIpfTtcbiAgYCxcbiAgZXJyb3I6IGNzc2BcbiAgICBjb2xvcjogJHt0aGVtZS5jb2xvcnMuZXJyb3IudGV4dH07XG4gICAgbWFyZ2luLXRvcDogJHt0aGVtZS5zcGFjaW5nKDEpfTtcbiAgYCxcbn0pO1xuIl0sIm5hbWVzIjpbIlJlYWN0IiwidXNlU3RhdGUiLCJ1c2VFZmZlY3QiLCJjc3MiLCJMaW5rQnV0dG9uIiwidXNlU3R5bGVzMiIsIlNlbGVjdCIsInByZWZpeFJvdXRlIiwidGVzdElkcyIsIlBsdWdpblBhZ2UiLCJnZXRCYWNrZW5kU3J2IiwiZ2V0U2VydmljZU1ldHJpY3MiLCJST1VURVMiLCJzdWZmaXhTZXQiLCJQYWdlT25lIiwic3R5bGVzIiwiZ2V0U3R5bGVzIiwic2VsZWN0ZWRTZXJ2aWNlIiwic2V0U2VsZWN0ZWRTZXJ2aWNlIiwic2VsZWN0ZWREYXNoYm9hcmQiLCJzZXRTZWxlY3RlZERhc2hib2FyZCIsImF2YWlsYWJsZVNlcnZpY2VzIiwic2V0QXZhaWxhYmxlU2VydmljZXMiLCJhdmFpbGFibGVEYXNoYm9hcmRzIiwic2V0QXZhaWxhYmxlRGFzaGJvYXJkcyIsImxvYWRpbmdTZXJ2aWNlcyIsInNldExvYWRpbmdTZXJ2aWNlcyIsImxvYWRpbmdEYXNoYm9hcmRzIiwic2V0TG9hZGluZ0Rhc2hib2FyZHMiLCJzZXJ2aWNlRXJyb3IiLCJzZXRTZXJ2aWNlRXJyb3IiLCJkYXNoYm9hcmRFcnJvciIsInNldERhc2hib2FyZEVycm9yIiwibWV0cmljQ29tcGFyaXNvbiIsInNldE1ldHJpY0NvbXBhcmlzb24iLCJmZXRjaEF2YWlsYWJsZVNlcnZpY2VzIiwiZmV0Y2hBdmFpbGFibGVEYXNoYm9hcmRzIiwicmVzcG9uc2UiLCJmZXRjaCIsInNlcnZpY2VzIiwianNvbiIsImZvcm1hdHRlZFNlcnZpY2VzIiwibWFwIiwic2VydmljZSIsImxhYmVsIiwidGV4dCIsInZhbHVlIiwiZXJyb3IiLCJjb25zb2xlIiwiZGFzaGJvYXJkcyIsImdldCIsImZvcm1hdHRlZERhc2hib2FyZHMiLCJkYXNoIiwidGl0bGUiLCJ1aWQiLCJnZXRVc2VkTWV0cmljcyIsImRhc2hib2FyZCIsImRhc2hib2FyZFBhbmVscyIsInBhbmVscyIsInVzZWRNZXRyaWNzU2V0IiwiU2V0IiwiZm9yRWFjaCIsInBhbmVsIiwidGFyZ2V0cyIsIkFycmF5IiwiaXNBcnJheSIsInRhcmdldCIsInRhcmdldE1ldHJpYyIsImZ1bmN0aW9uUmVnZXgiLCJtYXRjaCIsInNlcnZpY2VSZWdleCIsIlJlZ0V4cCIsInRlc3QiLCJhZGQiLCJ1c2VkTWV0cmljc0FycmF5IiwiZnJvbSIsImZvcm1hdE1ldHJpY3NCeVN1ZmZpeCIsIm1ldHJpYyIsImxvZyIsImNvbXBhcmVNZXRyaWNzIiwiZm9ybWF0dGVkTWV0cmljcyIsImF2YWlsYWJsZU1ldHJpY3MiLCJ1bnVzZWRNZXRyaWNzIiwiZmlsdGVyIiwiYXZhaWxhYmxlTWV0cmljIiwic29tZSIsInVzZWRNZXRyaWMiLCJyZWdleCIsInJlcGxhY2UiLCJ1c2VkTWV0cmljcyIsImZldGNoQW5kQ29tcGFyZU1ldHJpY3MiLCJwcm9jZXNzZWRNZXRyaWNzIiwibWV0cmljcyIsImdyb3VwZWRNZXRyaWNzIiwic3RyIiwic3VmZml4IiwiZW5kc1dpdGgiLCJwcmVmaXgiLCJzbGljZSIsImxlbmd0aCIsImhhcyIsInB1c2giLCJkaXYiLCJkYXRhLXRlc3RpZCIsInBhZ2VPbmUiLCJjb250YWluZXIiLCJoMyIsImNsYXNzTmFtZSIsIm1hcmdpblRvcCIsIm9wdGlvbnMiLCJvbkNoYW5nZSIsInBsYWNlaG9sZGVyIiwiaXNMb2FkaW5nIiwiaDQiLCJzdHJvbmciLCJ1bCIsImxpIiwia2V5IiwibmF2aWdhdGVUb0ZvdXIiLCJocmVmIiwiRm91ciIsInRoZW1lIiwic3BhY2luZyIsImNvbG9ycyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./pages/PageOne.tsx\n");

/***/ }),

/***/ "./utils/utils.routing.ts":
/*!********************************!*\
  !*** ./utils/utils.routing.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   prefixRoute: () => (/* binding */ prefixRoute)\n/* harmony export */ });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants */ \"./constants.ts\");\n\n// Prefixes the route with the base URL of the plugin\nfunction prefixRoute(route) {\n    return `${_constants__WEBPACK_IMPORTED_MODULE_0__.PLUGIN_BASE_URL}/${route}`;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi91dGlscy91dGlscy5yb3V0aW5nLnRzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQStDO0FBRS9DLHFEQUFxRDtBQUM5QyxTQUFTQyxZQUFZQyxLQUFhO0lBQ3ZDLE9BQU8sQ0FBQyxFQUFFRix1REFBZUEsQ0FBQyxDQUFDLEVBQUVFLE1BQU0sQ0FBQztBQUN0QyIsInNvdXJjZXMiOlsid2VicGFjazovL2htY2NsaW5pYy1za2VsZXRvbi1hcHAvLi91dGlscy91dGlscy5yb3V0aW5nLnRzPzRjNzkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUExVR0lOX0JBU0VfVVJMIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcblxuLy8gUHJlZml4ZXMgdGhlIHJvdXRlIHdpdGggdGhlIGJhc2UgVVJMIG9mIHRoZSBwbHVnaW5cbmV4cG9ydCBmdW5jdGlvbiBwcmVmaXhSb3V0ZShyb3V0ZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuIGAke1BMVUdJTl9CQVNFX1VSTH0vJHtyb3V0ZX1gO1xufVxuIl0sIm5hbWVzIjpbIlBMVUdJTl9CQVNFX1VSTCIsInByZWZpeFJvdXRlIiwicm91dGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./utils/utils.routing.ts\n");

/***/ })

}]);