"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkhmcclinic_skeleton_app"] = self["webpackChunkhmcclinic_skeleton_app"] || []).push([["pages_PageOne_tsx"],{

/***/ "./components/testIds.ts":
/*!*******************************!*\
  !*** ./components/testIds.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   testIds: () => (/* binding */ testIds)\n/* harmony export */ });\nconst testIds = {\n    appConfig: {\n        apiKey: 'data-testid ac-api-key',\n        apiUrl: 'data-testid ac-api-url',\n        submit: 'data-testid ac-submit-form'\n    },\n    pageOne: {\n        container: 'data-testid pg-one-container',\n        navigateToFour: 'data-testid navigate-to-four'\n    },\n    pageTwo: {\n        container: 'data-testid pg-two-container'\n    },\n    pageThree: {\n        container: 'data-testid pg-three-container'\n    },\n    pageFour: {\n        container: 'data-testid pg-four-container',\n        navigateBack: 'data-testid navigate-back'\n    },\n    pageUnused: {\n        container: 'data-testid pg-unused-container'\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL3Rlc3RJZHMudHMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLE1BQU1BLFVBQVU7SUFDckJDLFdBQVc7UUFDVEMsUUFBUTtRQUNSQyxRQUFRO1FBQ1JDLFFBQVE7SUFDVjtJQUNBQyxTQUFTO1FBQ1BDLFdBQVc7UUFDWEMsZ0JBQWdCO0lBQ2xCO0lBQ0FDLFNBQVM7UUFDUEYsV0FBVztJQUNiO0lBQ0FHLFdBQVc7UUFDVEgsV0FBVztJQUNiO0lBQ0FJLFVBQVU7UUFDUkosV0FBVztRQUNYSyxjQUFjO0lBQ2hCO0lBQ0FDLFlBQVk7UUFDVk4sV0FBVztJQUNiO0FBQ0YsRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovL2htY2NsaW5pYy1za2VsZXRvbi1hcHAvLi9jb21wb25lbnRzL3Rlc3RJZHMudHM/MDA1OSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgdGVzdElkcyA9IHtcbiAgYXBwQ29uZmlnOiB7XG4gICAgYXBpS2V5OiAnZGF0YS10ZXN0aWQgYWMtYXBpLWtleScsXG4gICAgYXBpVXJsOiAnZGF0YS10ZXN0aWQgYWMtYXBpLXVybCcsXG4gICAgc3VibWl0OiAnZGF0YS10ZXN0aWQgYWMtc3VibWl0LWZvcm0nLFxuICB9LFxuICBwYWdlT25lOiB7XG4gICAgY29udGFpbmVyOiAnZGF0YS10ZXN0aWQgcGctb25lLWNvbnRhaW5lcicsXG4gICAgbmF2aWdhdGVUb0ZvdXI6ICdkYXRhLXRlc3RpZCBuYXZpZ2F0ZS10by1mb3VyJyxcbiAgfSxcbiAgcGFnZVR3bzoge1xuICAgIGNvbnRhaW5lcjogJ2RhdGEtdGVzdGlkIHBnLXR3by1jb250YWluZXInLFxuICB9LFxuICBwYWdlVGhyZWU6IHtcbiAgICBjb250YWluZXI6ICdkYXRhLXRlc3RpZCBwZy10aHJlZS1jb250YWluZXInLFxuICB9LFxuICBwYWdlRm91cjoge1xuICAgIGNvbnRhaW5lcjogJ2RhdGEtdGVzdGlkIHBnLWZvdXItY29udGFpbmVyJyxcbiAgICBuYXZpZ2F0ZUJhY2s6ICdkYXRhLXRlc3RpZCBuYXZpZ2F0ZS1iYWNrJyxcbiAgfSxcbiAgcGFnZVVudXNlZDoge1xuICAgIGNvbnRhaW5lcjogJ2RhdGEtdGVzdGlkIHBnLXVudXNlZC1jb250YWluZXInLFxuICB9LFxufTtcbiJdLCJuYW1lcyI6WyJ0ZXN0SWRzIiwiYXBwQ29uZmlnIiwiYXBpS2V5IiwiYXBpVXJsIiwic3VibWl0IiwicGFnZU9uZSIsImNvbnRhaW5lciIsIm5hdmlnYXRlVG9Gb3VyIiwicGFnZVR3byIsInBhZ2VUaHJlZSIsInBhZ2VGb3VyIiwibmF2aWdhdGVCYWNrIiwicGFnZVVudXNlZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./components/testIds.ts\n");

/***/ }),

/***/ "./getServiceMetrics.tsx":
/*!*******************************!*\
  !*** ./getServiceMetrics.tsx ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getServiceMetrics: () => (/* binding */ getServiceMetrics)\n/* harmony export */ });\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n    try {\n        var info = gen[key](arg);\n        var value = info.value;\n    } catch (error) {\n        reject(error);\n        return;\n    }\n    if (info.done) {\n        resolve(value);\n    } else {\n        Promise.resolve(value).then(_next, _throw);\n    }\n}\nfunction _async_to_generator(fn) {\n    return function() {\n        var self = this, args = arguments;\n        return new Promise(function(resolve, reject) {\n            var gen = fn.apply(self, args);\n            function _next(value) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n            }\n            function _throw(err) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n            }\n            _next(undefined);\n        });\n    };\n}\nfunction getServiceMetrics(selectedService) {\n    return _getServiceMetrics.apply(this, arguments);\n}\nfunction _getServiceMetrics() {\n    _getServiceMetrics = _async_to_generator(function*(selectedService) {\n        try {\n            console.log(selectedService);\n            const response = yield fetch(`http://localhost:9080/metrics/find?query=${selectedService}.*`);\n            const services = yield response.json();\n            console.log(`services:`);\n            console.log(`TEST LOG:`);\n            console.log(services);\n            const formattedServices = [];\n            // Function to recursively fetch leaf metrics\n            const fetchLeaves = /*#__PURE__*/ function() {\n                var _ref = _async_to_generator(function*(service) {\n                    if (service.leaf) {\n                        // If it's a leaf, add to formattedServices\n                        formattedServices.push({\n                            label: service.id,\n                            value: service.id\n                        });\n                    } else {\n                        // Otherwise, fetch children\n                        const childResponse = yield fetch(`http://localhost:9080/metrics/find?query=${service.id}.*`);\n                        const children = yield childResponse.json();\n                        if (children.length === 0) {\n                            // If there are no children, add the service itself\n                            formattedServices.push(service.id);\n                        } else {\n                            // Otherwise, process children\n                            yield Promise.all(children.map(fetchLeaves));\n                        }\n                    }\n                });\n                return function fetchLeaves(service) {\n                    return _ref.apply(this, arguments);\n                };\n            }();\n            // Process each service\n            yield Promise.all(services.map(fetchLeaves));\n            const formattedMetrics = formattedServices;\n            // setAvailableServices(formattedServices);\n            // setServiceMetrics(formattedMetrics);\n            console.log(formattedMetrics);\n            // ADDED COMPARE METRICS ~~~~~~~~\n            // compareMetrics(formattedMetrics);\n            // console.log(\"change cool yay change1\");\n            return formattedMetrics;\n        } catch (error) {\n            console.error(`Error fetching metrics for ${selectedService} from Graphite:`, error);\n            //setMetricError('Failed to load metrics');\n            return [];\n        }\n    });\n    return _getServiceMetrics.apply(this, arguments);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9nZXRTZXJ2aWNlTWV0cmljcy50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRU8sU0FBZUEsa0JBQWtCQyxlQUF1QjtXQUF6Q0Q7O1NBQUFBO0lBQUFBLHFCQUFmLDhCQUFpQ0MsZUFBdUI7UUFDN0QsSUFBSTtZQUNGQyxRQUFRQyxHQUFHLENBQUNGO1lBQ1osTUFBTUcsV0FBVyxNQUFNQyxNQUFNLENBQUMseUNBQXlDLEVBQUVKLGdCQUFnQixFQUFFLENBQUM7WUFDNUYsTUFBTUssV0FBOEIsTUFBTUYsU0FBU0csSUFBSTtZQUN2REwsUUFBUUMsR0FBRyxDQUFDLENBQUMsU0FBUyxDQUFDO1lBQ3ZCRCxRQUFRQyxHQUFHLENBQUMsQ0FBQyxTQUFTLENBQUM7WUFDdkJELFFBQVFDLEdBQUcsQ0FBQ0c7WUFDWixNQUFNRSxvQkFBOEIsRUFBRTtZQUd0Qyw2Q0FBNkM7WUFDN0MsTUFBTUM7MkJBQWMsOEJBQU9DO29CQUN6QixJQUFJQSxRQUFRQyxJQUFJLEVBQUU7d0JBQ2hCLDJDQUEyQzt3QkFDM0NILGtCQUFrQkksSUFBSSxDQUFDOzRCQUNyQkMsT0FBT0gsUUFBUUksRUFBRTs0QkFDakJDLE9BQU9MLFFBQVFJLEVBQUU7d0JBQ25CO29CQUNGLE9BQU87d0JBQ0wsNEJBQTRCO3dCQUM1QixNQUFNRSxnQkFBZ0IsTUFBTVgsTUFBTSxDQUFDLHlDQUF5QyxFQUFFSyxRQUFRSSxFQUFFLENBQUMsRUFBRSxDQUFDO3dCQUM1RixNQUFNRyxXQUE4QixNQUFNRCxjQUFjVCxJQUFJO3dCQUU1RCxJQUFJVSxTQUFTQyxNQUFNLEtBQUssR0FBRzs0QkFDekIsbURBQW1EOzRCQUNuRFYsa0JBQWtCSSxJQUFJLENBQUNGLFFBQVFJLEVBQUU7d0JBQ25DLE9BQU87NEJBQ0wsOEJBQThCOzRCQUM5QixNQUFNSyxRQUFRQyxHQUFHLENBQUNILFNBQVNJLEdBQUcsQ0FBQ1o7d0JBQ2pDO29CQUNGO2dCQUNGO2dDQXBCTUEsWUFBcUJDOzs7O1lBc0IzQix1QkFBdUI7WUFDdkIsTUFBTVMsUUFBUUMsR0FBRyxDQUFDZCxTQUFTZSxHQUFHLENBQUNaO1lBRS9CLE1BQU1hLG1CQUFtQmQ7WUFDbkIsMkNBQTJDO1lBRWpELHVDQUF1QztZQUN2Q04sUUFBUUMsR0FBRyxDQUFDbUI7WUFHWixpQ0FBaUM7WUFDakMsb0NBQW9DO1lBQ3BDLDBDQUEwQztZQUMxQyxPQUFPQTtRQUdULEVBQUUsT0FBT0MsT0FBTztZQUNkckIsUUFBUXFCLEtBQUssQ0FBQyxDQUFDLDJCQUEyQixFQUFFdEIsZ0JBQWdCLGVBQWUsQ0FBQyxFQUFFc0I7WUFDOUUsMkNBQTJDO1lBQzVDLE9BQU8sRUFBRTtRQUNWO0lBQ0Y7V0F2RHNCdkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9obWNjbGluaWMtc2tlbGV0b24tYXBwLy4vZ2V0U2VydmljZU1ldHJpY3MudHN4PzIyNDQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT3B0aW9uLCBTZXJ2aWNlUmVzcG9uc2UgfSBmcm9tICcuL2NvbnN0YW50cyc7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRTZXJ2aWNlTWV0cmljcyhzZWxlY3RlZFNlcnZpY2U6IHN0cmluZyk6IFByb21pc2U8T3B0aW9uW10+IHtcbiAgdHJ5IHtcbiAgICBjb25zb2xlLmxvZyhzZWxlY3RlZFNlcnZpY2UpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYGh0dHA6Ly9sb2NhbGhvc3Q6OTA4MC9tZXRyaWNzL2ZpbmQ/cXVlcnk9JHtzZWxlY3RlZFNlcnZpY2V9LipgKTtcbiAgICBjb25zdCBzZXJ2aWNlczogU2VydmljZVJlc3BvbnNlW10gPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgY29uc29sZS5sb2coYHNlcnZpY2VzOmApO1xuICAgIGNvbnNvbGUubG9nKGBURVNUIExPRzpgKTtcbiAgICBjb25zb2xlLmxvZyhzZXJ2aWNlcyk7XG4gICAgY29uc3QgZm9ybWF0dGVkU2VydmljZXM6IE9wdGlvbltdID0gW107XG4gICAgXG5cbiAgICAvLyBGdW5jdGlvbiB0byByZWN1cnNpdmVseSBmZXRjaCBsZWFmIG1ldHJpY3NcbiAgICBjb25zdCBmZXRjaExlYXZlcyA9IGFzeW5jIChzZXJ2aWNlOiBTZXJ2aWNlUmVzcG9uc2UpID0+IHtcbiAgICAgIGlmIChzZXJ2aWNlLmxlYWYpIHtcbiAgICAgICAgLy8gSWYgaXQncyBhIGxlYWYsIGFkZCB0byBmb3JtYXR0ZWRTZXJ2aWNlc1xuICAgICAgICBmb3JtYXR0ZWRTZXJ2aWNlcy5wdXNoKHtcbiAgICAgICAgICBsYWJlbDogc2VydmljZS5pZCxcbiAgICAgICAgICB2YWx1ZTogc2VydmljZS5pZCxcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBPdGhlcndpc2UsIGZldGNoIGNoaWxkcmVuXG4gICAgICAgIGNvbnN0IGNoaWxkUmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgaHR0cDovL2xvY2FsaG9zdDo5MDgwL21ldHJpY3MvZmluZD9xdWVyeT0ke3NlcnZpY2UuaWR9LipgKTtcbiAgICAgICAgY29uc3QgY2hpbGRyZW46IFNlcnZpY2VSZXNwb25zZVtdID0gYXdhaXQgY2hpbGRSZXNwb25zZS5qc29uKCk7XG5cbiAgICAgICAgaWYgKGNoaWxkcmVuLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIC8vIElmIHRoZXJlIGFyZSBubyBjaGlsZHJlbiwgYWRkIHRoZSBzZXJ2aWNlIGl0c2VsZlxuICAgICAgICAgIGZvcm1hdHRlZFNlcnZpY2VzLnB1c2goc2VydmljZS5pZCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gT3RoZXJ3aXNlLCBwcm9jZXNzIGNoaWxkcmVuXG4gICAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwoY2hpbGRyZW4ubWFwKGZldGNoTGVhdmVzKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gUHJvY2VzcyBlYWNoIHNlcnZpY2VcbiAgICBhd2FpdCBQcm9taXNlLmFsbChzZXJ2aWNlcy5tYXAoZmV0Y2hMZWF2ZXMpKTtcblxuICAgIGNvbnN0IGZvcm1hdHRlZE1ldHJpY3MgPSBmb3JtYXR0ZWRTZXJ2aWNlcztcbiAgICAgICAgICAvLyBzZXRBdmFpbGFibGVTZXJ2aWNlcyhmb3JtYXR0ZWRTZXJ2aWNlcyk7XG5cbiAgICAvLyBzZXRTZXJ2aWNlTWV0cmljcyhmb3JtYXR0ZWRNZXRyaWNzKTtcbiAgICBjb25zb2xlLmxvZyhmb3JtYXR0ZWRNZXRyaWNzKTtcbiAgICBcblxuICAgIC8vIEFEREVEIENPTVBBUkUgTUVUUklDUyB+fn5+fn5+flxuICAgIC8vIGNvbXBhcmVNZXRyaWNzKGZvcm1hdHRlZE1ldHJpY3MpO1xuICAgIC8vIGNvbnNvbGUubG9nKFwiY2hhbmdlIGNvb2wgeWF5IGNoYW5nZTFcIik7XG4gICAgcmV0dXJuIGZvcm1hdHRlZE1ldHJpY3M7XG5cblxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoYEVycm9yIGZldGNoaW5nIG1ldHJpY3MgZm9yICR7c2VsZWN0ZWRTZXJ2aWNlfSBmcm9tIEdyYXBoaXRlOmAsIGVycm9yKTtcbiAgICAvL3NldE1ldHJpY0Vycm9yKCdGYWlsZWQgdG8gbG9hZCBtZXRyaWNzJyk7XG4gICByZXR1cm4gW107XG4gIH1cbn0iXSwibmFtZXMiOlsiZ2V0U2VydmljZU1ldHJpY3MiLCJzZWxlY3RlZFNlcnZpY2UiLCJjb25zb2xlIiwibG9nIiwicmVzcG9uc2UiLCJmZXRjaCIsInNlcnZpY2VzIiwianNvbiIsImZvcm1hdHRlZFNlcnZpY2VzIiwiZmV0Y2hMZWF2ZXMiLCJzZXJ2aWNlIiwibGVhZiIsInB1c2giLCJsYWJlbCIsImlkIiwidmFsdWUiLCJjaGlsZFJlc3BvbnNlIiwiY2hpbGRyZW4iLCJsZW5ndGgiLCJQcm9taXNlIiwiYWxsIiwibWFwIiwiZm9ybWF0dGVkTWV0cmljcyIsImVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./getServiceMetrics.tsx\n");

/***/ }),

/***/ "./pages/PageOne.tsx":
/*!***************************!*\
  !*** ./pages/PageOne.tsx ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _emotion_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @emotion/css */ \"@emotion/css\");\n/* harmony import */ var _emotion_css__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_emotion_css__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @grafana/ui */ \"@grafana/ui\");\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _utils_utils_routing__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/utils.routing */ \"./utils/utils.routing.ts\");\n/* harmony import */ var _components_testIds__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../components/testIds */ \"./components/testIds.ts\");\n/* harmony import */ var _grafana_runtime__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @grafana/runtime */ \"@grafana/runtime\");\n/* harmony import */ var _grafana_runtime__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_grafana_runtime__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _getServiceMetrics__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../getServiceMetrics */ \"./getServiceMetrics.tsx\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../constants */ \"./constants.ts\");\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n    try {\n        var info = gen[key](arg);\n        var value = info.value;\n    } catch (error) {\n        reject(error);\n        return;\n    }\n    if (info.done) {\n        resolve(value);\n    } else {\n        Promise.resolve(value).then(_next, _throw);\n    }\n}\nfunction _async_to_generator(fn) {\n    return function() {\n        var self = this, args = arguments;\n        return new Promise(function(resolve, reject) {\n            var gen = fn.apply(self, args);\n            function _next(value) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n            }\n            function _throw(err) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n            }\n            _next(undefined);\n        });\n    };\n}\n\n\n\n\n\n\n\n\nfunction PageOne() {\n    const styles = (0,_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.useStyles2)(getStyles);\n    // State for selected options and available options\n    const [selectedService, setSelectedService] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [selectedDashboard, setSelectedDashboard] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [availableServices, setAvailableServices] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [availableDashboards, setAvailableDashboards] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [loadingServices, setLoadingServices] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [loadingDashboards, setLoadingDashboards] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [serviceError, setServiceError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [dashboardError, setDashboardError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [metricComparison, setMetricComparison] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        fetchAvailableServices();\n        fetchAvailableDashboards();\n    }, []);\n    const fetchAvailableServices = /*#__PURE__*/ function() {\n        var _ref = _async_to_generator(function*() {\n            setLoadingServices(true);\n            setServiceError(null);\n            try {\n                const response = yield fetch('http://localhost:9080/metrics/find?query=*'); // TODO: THIS SHOULD NOT BE HARDCODED. FIX THIS.\n                const services = yield response.json();\n                const formattedServices = services.map((service)=>({\n                        label: service.text,\n                        value: service.text\n                    }));\n                setAvailableServices(formattedServices);\n            } catch (error) {\n                console.error('Error fetching services from Graphite:', error);\n                setServiceError('Failed to load services');\n            } finally{\n                setLoadingServices(false);\n            }\n        });\n        return function fetchAvailableServices() {\n            return _ref.apply(this, arguments);\n        };\n    }();\n    const fetchAvailableDashboards = /*#__PURE__*/ function() {\n        var _ref = _async_to_generator(function*() {\n            setLoadingDashboards(true);\n            setDashboardError(null);\n            try {\n                const dashboards = yield (0,_grafana_runtime__WEBPACK_IMPORTED_MODULE_5__.getBackendSrv)().get('/api/search');\n                const formattedDashboards = dashboards.map((dash)=>({\n                        label: dash.title,\n                        value: dash.uid\n                    }));\n                setAvailableDashboards(formattedDashboards);\n            } catch (error) {\n                console.error('Error fetching dashboards:', error);\n                setDashboardError('Failed to load dashboards');\n            } finally{\n                setLoadingDashboards(false);\n            }\n        });\n        return function fetchAvailableDashboards() {\n            return _ref.apply(this, arguments);\n        };\n    }();\n    function compareMetrics(formattedMetrics) {\n        return _compareMetrics.apply(this, arguments);\n    }\n    function _compareMetrics() {\n        _compareMetrics = // const compareMetrics = async () => {\n        _async_to_generator(function*(formattedMetrics) {\n            if (!selectedService || !selectedDashboard || !formattedMetrics) {\n                return;\n            }\n            try {\n                // Fetch the metrics for the selected service\n                const availableMetrics = formattedMetrics.map((metric)=>metric.label);\n                console.log(\"Service Metrics here:\");\n                console.log(formattedMetrics);\n                // Fetch the selected dashboard data to get metrics\n                const dashboard = yield (0,_grafana_runtime__WEBPACK_IMPORTED_MODULE_5__.getBackendSrv)().get(`/api/dashboards/uid/${selectedDashboard.value}`);\n                const dashboardPanels = dashboard.dashboard.panels || [];\n                // let usedMetrics: string[] = [];\n                let usedMetricsSet = new Set();\n                dashboardPanels.forEach((panel)=>{\n                    if (panel.targets && Array.isArray(panel.targets)) {\n                        panel.targets.forEach((target)=>{\n                            if (target.target) {\n                                let targetMetric = target.target;\n                                // Regular expression to match any function at the start, followed by a metric name\n                                const functionRegex = /^[a-zA-Z0-9_]+\\((.*?)\\)$/;\n                                // If the target metric starts with a function, remove it and retain the metric name\n                                const match = targetMetric.match(functionRegex);\n                                if (match) {\n                                    // Extract the part inside the parentheses (the actual metric name)\n                                    targetMetric = match[1];\n                                }\n                                // Use regex to check if the target metric belongs to the selected service\n                                const serviceRegex = new RegExp(`(^|[^a-zA-Z0-9_])${selectedService.value}([^a-zA-Z0-9_]|$)`);\n                                if (serviceRegex.test(targetMetric)) {\n                                    usedMetricsSet.add({\n                                        label: targetMetric,\n                                        value: targetMetric\n                                    }); // Add the metric without the function wrapper\n                                }\n                            }\n                        });\n                    }\n                });\n                // Compare available metrics with the used metrics\n                let usedMetricsArray = Array.from(usedMetricsSet);\n                usedMetricsArray = formatMetricsBySuffix(usedMetricsArray);\n                let usedMetricsArrayString = new Array();\n                usedMetricsArray.forEach((metric)=>{\n                    usedMetricsArrayString.push(metric.label);\n                });\n                // let usedMetricsStrings: Array<string> = new Array();\n                let unusedMetrics = new Array();\n                availableMetrics.forEach((availableMetric)=>{\n                    // take available metric. if it matches a metric in the used Metrics list, then remove it.\n                    usedMetricsArray.forEach((usedMetric)=>{\n                        let usedMetric_RegExp = new RegExp(`${usedMetric.label}`);\n                        console.log(`regexp ${usedMetric_RegExp}`);\n                        if (usedMetric_RegExp.test(availableMetric)) {\n                            // dont do anything\n                            console.log(`MATCH ${usedMetric_RegExp} ${availableMetric}`);\n                        } else {\n                            console.log(`unused : ${availableMetric}`);\n                            unusedMetrics.push(availableMetric);\n                        }\n                    });\n                });\n                // Set the comparison result\n                setMetricComparison({\n                    usedMetrics: usedMetricsArrayString,\n                    unusedMetrics\n                });\n            } catch (error) {\n                console.error('Error comparing metrics:', error);\n            }\n        });\n        return _compareMetrics.apply(this, arguments);\n    }\n    ;\n    // Trigger comparison when both service and dashboard are selected\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const fetchAndCompareMetrics = /*#__PURE__*/ function() {\n            var _ref = _async_to_generator(function*() {\n                if (selectedService && selectedDashboard) {\n                    try {\n                        // Fetch formatted metrics\n                        const formattedMetrics = yield (0,_getServiceMetrics__WEBPACK_IMPORTED_MODULE_6__.getServiceMetrics)(selectedService.value);\n                        // Step 1: Process and format the metrics\n                        const processedMetrics = formatMetricsBySuffix(formattedMetrics);\n                        // Compare metrics\n                        yield compareMetrics(processedMetrics);\n                    } catch (error) {\n                        console.error('Error in fetching or comparing metrics:', error);\n                    }\n                }\n            });\n            return function fetchAndCompareMetrics() {\n                return _ref.apply(this, arguments);\n            };\n        }();\n        fetchAndCompareMetrics();\n    }, [\n        selectedService,\n        selectedDashboard\n    ]);\n    const formatMetricsBySuffix = (metrics)=>{\n        // Initialize map for prefix if not exists\n        // maps each metric (minus the suffix) to a frequency map of suffix occurances\n        // const groupedMetrics = new Map<string, Map<string, number>>();\n        const groupedMetrics = new Set();\n        // Step 1: Group metrics by prefix and count suffix occurrences\n        metrics.forEach((option)=>{\n            const label = option.label;\n            for (let suffix of _constants__WEBPACK_IMPORTED_MODULE_7__.suffixSet){\n                if (label.endsWith(suffix)) {\n                    const prefix = label.slice(0, label.length - suffix.length);\n                    if (!groupedMetrics.has(prefix)) {\n                        groupedMetrics.add(prefix);\n                    }\n                    break; // Only match one suffix\n                }\n            }\n        });\n        // Step 2: Build new Option objects with formatted labels\n        const formattedOptions = [];\n        groupedMetrics.forEach((prefix)=>{\n            // let labelWithSuffixes = prefix;\n            // suffixCountMap.forEach((count, suffix) => {\n            //   labelWithSuffixes += ` ${suffix}(${count})`;\n            // });\n            formattedOptions.push({\n                label: prefix,\n                value: prefix\n            });\n        });\n        return formattedOptions;\n    };\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_runtime__WEBPACK_IMPORTED_MODULE_5__.PluginPage, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        \"data-testid\": _components_testIds__WEBPACK_IMPORTED_MODULE_4__.testIds.pageOne.container\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"h3\", null, \"This is page one.\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: styles.marginTop\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Select, {\n        options: availableServices,\n        value: selectedService,\n        onChange: setSelectedService,\n        placeholder: \"Select Service\",\n        isLoading: loadingServices\n    }), serviceError && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: styles.error\n    }, serviceError)), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: styles.marginTop\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Select, {\n        options: availableDashboards,\n        value: selectedDashboard,\n        onChange: setSelectedDashboard,\n        placeholder: \"Select Dashboard\",\n        isLoading: loadingDashboards\n    }), dashboardError && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: styles.error\n    }, dashboardError)), metricComparison && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: styles.marginTop\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"h4\", null, \"Metric Comparison:\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"strong\", null, \"Used Metrics:\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"ul\", null, metricComparison.usedMetrics.map((metric)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"li\", {\n            key: metric\n        }, metric)))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"strong\", null, \"Unused Metrics:\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"ul\", null, metricComparison.unusedMetrics.map((metric)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"li\", {\n            key: metric\n        }, metric))))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: styles.marginTop\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.LinkButton, {\n        \"data-testid\": _components_testIds__WEBPACK_IMPORTED_MODULE_4__.testIds.pageOne.navigateToFour,\n        href: (0,_utils_utils_routing__WEBPACK_IMPORTED_MODULE_3__.prefixRoute)(_constants__WEBPACK_IMPORTED_MODULE_7__.ROUTES.Four)\n    }, \"Full-width page example\"))));\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (PageOne);\n// Styles\nconst getStyles = (theme)=>({\n        marginTop: (0,_emotion_css__WEBPACK_IMPORTED_MODULE_1__.css)`\n    margin-top: ${theme.spacing(2)};\n  `,\n        error: (0,_emotion_css__WEBPACK_IMPORTED_MODULE_1__.css)`\n    color: ${theme.colors.error.text};\n    margin-top: ${theme.spacing(1)};\n  `\n    });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./pages/PageOne.tsx\n");

/***/ }),

/***/ "./utils/utils.routing.ts":
/*!********************************!*\
  !*** ./utils/utils.routing.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   prefixRoute: () => (/* binding */ prefixRoute)\n/* harmony export */ });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants */ \"./constants.ts\");\n\n// Prefixes the route with the base URL of the plugin\nfunction prefixRoute(route) {\n    return `${_constants__WEBPACK_IMPORTED_MODULE_0__.PLUGIN_BASE_URL}/${route}`;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi91dGlscy91dGlscy5yb3V0aW5nLnRzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQStDO0FBRS9DLHFEQUFxRDtBQUM5QyxTQUFTQyxZQUFZQyxLQUFhO0lBQ3ZDLE9BQU8sQ0FBQyxFQUFFRix1REFBZUEsQ0FBQyxDQUFDLEVBQUVFLE1BQU0sQ0FBQztBQUN0QyIsInNvdXJjZXMiOlsid2VicGFjazovL2htY2NsaW5pYy1za2VsZXRvbi1hcHAvLi91dGlscy91dGlscy5yb3V0aW5nLnRzPzRjNzkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUExVR0lOX0JBU0VfVVJMIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcblxuLy8gUHJlZml4ZXMgdGhlIHJvdXRlIHdpdGggdGhlIGJhc2UgVVJMIG9mIHRoZSBwbHVnaW5cbmV4cG9ydCBmdW5jdGlvbiBwcmVmaXhSb3V0ZShyb3V0ZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuIGAke1BMVUdJTl9CQVNFX1VSTH0vJHtyb3V0ZX1gO1xufVxuIl0sIm5hbWVzIjpbIlBMVUdJTl9CQVNFX1VSTCIsInByZWZpeFJvdXRlIiwicm91dGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./utils/utils.routing.ts\n");

/***/ })

}]);